#
# This is free software, lisence use MIT.
# 
# Copyright (C) 2019 P3TERX <https://p3terx.com>
# Copyright (C) 2019 KFERMercer <KFER.Mercer@gmail.com>
# 
# <https://github.com/KFERMercer/OpenWrt-CI>
#

name: My-OpenWrt-CI

on:
 release:
  types: [published]
 push:
  branches:
   - master
# schedule:
#  - cron: 0 8 * * 5
 watch:
  types: [started]
  
env:
 REPO_URL: https://github.com/coolsnowwolf/lede
 REPO_BRANCH: master
 DIY_SH: diy.sh
 FREE_UP_DISK: false

jobs:
 build:
  runs-on: ubuntu-latest
  if: github.event.repository.owner.id == github.event.sender.id
  steps:
  - name: Checkout
   uses: actions/checkout@master

  - name: Initialization environment
   env:
    DEBIAN_FRONTEND: noninteractive
   run: |
    sudo swapoff /swapfile
    sudo rm -rf /swapfile /etc/apt/sources.list.d/*
    sudo -E apt-get -qq update
    sudo -E apt-get -qq install build-essential asciidoc binutils bzip2 gawk gettext git libncurses5-dev libz-dev patch unzip zlib1g-dev lib32gcc1 libc6-dev-i386 subversion flex uglifyjs git-core gcc-multilib p7zip p7zip-full msmtp libssl-dev texinfo libglib2.0-dev xmlto qemu-utils upx libelf-dev autoconf automake libtool autopoint device-tree-compiler
    curl -fsSL https://raw.githubusercontent.com/P3TERX/dotfiles/master/.bashrc >> ~/.bashrc
  - name: Free up disk space
   if: env.FREE_UP_DISK == 'true'
   env:
    DEBIAN_FRONTEND: noninteractive
   run: |
    sudo rm -rf /usr/share/dotnet
    docker rmi `docker images -q`
    sudo -E apt-get -q purge azure-cli ghc* zulu* hhvm llvm* firefox google* dotnet* powershell openjdk* mysql* php*
    sudo -E apt-get -qq autoremove --purge
    sudo -E apt-get -qq clean

  - name: Clone source code
   run: git clone --depth 1 $REPO_URL -b $REPO_BRANCH openwrt
    
  - name: Update feeds
   working-directory: ./openwrt
   run: |
    echo src-git lienol https://github.com/Lienol/openwrt-package >> feeds.conf.default
    cat feeds.conf.default
    echo 'start feeds update lienol'
    ./scripts/feeds update -a
    ./scripts/feeds install -a
    
  - name: Generate configuration file
   working-directory: ./openwrt
   run: |
    rm -f ./.config
     #
     # ========================固件定制部分========================
     # 
     # 
     # 如果不对本区块做出任何编辑, 则生成默认配置固件. 
     # 
     # 以下为定制化固件选项和说明:
     #
     #
     # 有些插件/选项是默认开启的, 如果想要关闭, 请参照以下示例进行编写:
     # 
     #     =========================================
     #     | # 取消编译VMware镜像:          |
     #     |           |
     #     | # echo CONFIG_VMDK_IMAGES is not set >> .config    |
     #     |                   |
     #     =========================================
     #
     # 
     # 以下是一些提前准备好的一些插件选项.
     # 直接取消注释相应代码块即可应用. 不要取消注释代码块上的汉字说明.
     # 如果不需要代码块里的某一项配置, 只需要删除相应行.
     #
     # 如果需要其他插件, 请按照示例自行添加.
     # 注意, 只需添加依赖链顶端的包. 如果你需要插件 A, 同时 A 依赖 B, 即只需要添加 A.
     # 
     # 无论你想要对固件进行怎样的定制, 都需要且只需要修改 回环内的内容.
     # 
     # 编译x64固件:
     echo CONFIG_TARGET_x86=y >> .config
     echo CONFIG_TARGET_x86_64=y >> .config
     echo CONFIG_TARGET_x86_64_Generic=y >> .config     
     # 
     # 固件压缩:    
     echo CONFIG_TARGET_IMAGES_GZIP=y >> .config   
     #   
     # 设置根目录大小
     # echo CONFIG_TARGET_KERNEL_PARTSIZE=16
     # echo CONFIG_TARGET_ROOTFS_PARTSIZE=500
     # 
     # 编译UEFI固件(不编译):
     # echo CONFIG_EFI_IMAGES is not set >> .config     
     # 
     # 取消编译VMware镜像以及镜像填充 (不要删除被缩进的注释符号)
     # echo CONFIG_VDI_IMAGES is not set >> .config
     # echo CONFIG_VMDK_IMAGES is not set >> .config
     # echo CONFIG_TARGET_IMAGES_PAD is not set >> .config    
     #  
     # IPv6支持:
     echo CONFIG_PACKAGE_dnsmasq_full_dhcpv6=y >> .config
     echo CONFIG_PACKAGE_ipv6helper=y >> .config     
     # 
     # 多文件系统支持:
     # echo CONFIG_PACKAGE_kmod-fs-nfs=y >> .config
     # echo CONFIG_PACKAGE_kmod-fs-nfs-common=y >> .config
     # echo CONFIG_PACKAGE_kmod-fs-nfs-v3=y >> .config
     # echo CONFIG_PACKAGE_kmod-fs-nfs-v4=y >> .config
     # echo CONFIG_PACKAGE_kmod-fs-ntfs=y >> .config
     # echo CONFIG_PACKAGE_kmod-fs-squashfs=y >> .config
     # 
     # USB3.0支持:
     # echo CONFIG_PACKAGE_kmod-usb-ohci=y >> .config
     # echo CONFIG_PACKAGE_kmod-usb-ohci-pci=y >> .config
     # echo CONFIG_PACKAGE_kmod-usb2=y >> .config
     # echo CONFIG_PACKAGE_kmod-usb2-pci=y >> .config
     # echo CONFIG_PACKAGE_kmod-usb3=y >> .config
     # 
     # 常用LuCI插件选择:
     # echo CONFIG_PACKAGE_luci-app-aria2=y >> .config
     # echo CONFIG_PACKAGE_luci-app-baidupcs-web=y >> .config
     # echo CONFIG_PACKAGE_luci-app-docker=y >> .config
     # echo CONFIG_PACKAGE_luci-app-frpc=y >> .config
     # echo CONFIG_PACKAGE_luci-app-hd-idle=y >> .config
     # echo CONFIG_PACKAGE_luci-app-kodexplorer=y >> .config
     # echo CONFIG_PACKAGE_luci-app-minidlna=y >> .config
     # echo CONFIG_PACKAGE_luci-app-openvpn=y >> .config
     # echo CONFIG_PACKAGE_luci-app-openvpn-server=y >> .config
     # echo CONFIG_PACKAGE_luci-app-verysync=y >> .config
     # echo CONFIG_PACKAGE_luci-app-webadmin=y >> .config
     # echo CONFIG_PACKAGE_luci-app-wireguard=y >> .config
     # echo CONFIG_PACKAGE_luci-app-wrtbwmon=y >> .config
     # echo CONFIG_PACKAGE_luci-app-ttyd=y >> .config
     echo CONFIG_PACKAGE_luci-app-adbyby-plus=y >> .config
     echo CONFIG_PACKAGE_luci-app-passwall=y >> .config
     echo CONFIG_PACKAGE_luci-app-passwall_INCLUDE_ipt2socks=y >> .config
     echo CONFIG_PACKAGE_luci-app-passwall_INCLUDE_Shadowsocks=y >> .config
     echo CONFIG_PACKAGE_luci-app-passwall_INCLUDE_ShadowsocksR=y >> .config
     echo CONFIG_PACKAGE_luci-app-passwall_INCLUDE_Shadowsocks_socks=y >> .config
     echo CONFIG_PACKAGE_luci-app-passwall_INCLUDE_ShadowsocksR_socks=y >> .config
     echo CONFIG_PACKAGE_luci-app-passwall_INCLUDE_V2ray=y >> .config
     echo CONFIG_PACKAGE_luci-app-passwall_INCLUDE_Trojan=y >> .config
     echo CONFIG_PACKAGE_luci-app-passwall_INCLUDE_Brook=y >> .config
     echo CONFIG_PACKAGE_luci-app-passwall_INCLUDE_kcptun=y >> .config
     echo CONFIG_PACKAGE_luci-app-passwall_INCLUDE_haproxy=y >> .config
     echo CONFIG_PACKAGE_luci-app-passwall_INCLUDE_ChinaDNS_NG=y >> .config
     echo CONFIG_PACKAGE_luci-app-passwall_INCLUDE_pdnsd=y >> .config
     echo CONFIG_PACKAGE_luci-app-passwall_INCLUDE_dns2socks=y >> .config
     echo CONFIG_PACKAGE_luci-app-passwall_INCLUDE_v2ray-plugin=y >> .config
     echo CONFIG_PACKAGE_luci-app-passwall_INCLUDE_simple-obfs=y >> .config
     echo CONFIG_PACKAGE_luci-app-ssr-plus=y >> .config
     echo CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_Simple_obfs=y >> .config
     echo CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_Kcptun=y >> .config
     echo CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_Shadowsocks=y >> .config
     echo CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_ShadowsocksR_Server=y >> .config
     echo CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_ShadowsocksR_Socks=y >> .config
     echo CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_Trojan=y >> .config
     echo CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_V2ray=y >> .config
     echo CONFIG_PACKAGE_luci-app-ssr-plus_INCLUDE_V2ray_plugin=y >> .config
     echo CONFIG_PACKAGE_luci-app-v2ray-server=y >> .config
     echo CONFIG_PACKAGE_luci-app-unblockmusic=y >> .config
     echo CONFIG_PACKAGE_luci-app-softethervpn=y >> .config
     echo CONFIG_PACKAGE_luci-app-smartdns=y >> .config
     #
     # Not needed
     #
     # echo # CONFIG_PACKAGE_luci-app-qbittorrent is not set >> .config
     # echo # CONFIG_PACKAGE_luci-app-pptp-server is not set >> .config
     # echo # CONFIG_PACKAGE_luci-app-ipsec-vpnd is not set >> .config
     # echo # CONFIG_PACKAGE_autosamba is not set >> .config
     # echo # CONFIG_PACKAGE_luci-app-samba4 is not set >> .config
     # echo # CONFIG_PACKAGE_luci-app-samba is not set >> .config
     # echo # CONFIG_PACKAGE_luci-i18n-samba-zh-cn is not set >> .config
     # echo # CONFIG_PACKAGE_samba36-server is not set >> .config
     # echo # CONFIG_PACKAGE_luci-app-vsftpd is not set >> .config
     
     # LuCI主题:
     
     echo CONFIG_PACKAGE_luci-theme-argon=y >> .config
     # echo CONFIG_PACKAGE_luci-theme-netgear=y >> .config
     #
     # Custom
     #
     # echo CONFIG_PACKAGE_luci-theme-rosy=y >> .config
     echo CONFIG_PACKAGE_luci-theme-atmaterial=y >> .config
     
     # 常用软件包:
     
     echo CONFIG_PACKAGE_curl=y >> .config
     echo CONFIG_PACKAGE_htop=y >> .config
     echo CONFIG_PACKAGE_nano=y >> .config
     # echo CONFIG_PACKAGE_screen=y >> .config
     # echo CONFIG_PACKAGE_tree=y >> .config
     # echo CONFIG_PACKAGE_vim-fuller=y >> .config
     echo CONFIG_PACKAGE_wget=y >> .config
     #
     # Custom
     #
     echo CONFIG_PACKAGE_qemu-ga=y >> .config
     
     # 
     # ========================固件定制部分结束========================
     # 
     chmod +x ../$DIY_SH
     ../$DIY_SH
     make defconfig
     
  - name: Download package
   working-directory: ./openwrt
   run: |
    make download -j$(nproc)
    find dl -size -1024c -exec ls -l {} \;
    find dl -size -1024c -exec rm -f {} \;
  - name: Build firmware
   working-directory: ./openwrt
   run: |
    echo "$(nproc) thread build."
    make -j$(nproc) V=s
  - name : Upload artifact
   uses: actions/upload-artifact@master
   with:
    name: lean+passwall定制版
    path: openwrt/bin
