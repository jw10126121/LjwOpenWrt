#=================================================
# Description: Build OpenWrt using GitHub Actions
# Lisence: MIT
#=================================================

name:  ax18

on:
  #手动编译
  workflow_dispatch:
    inputs:
      iCONFIG:
        description: '配置文件名：'
        required: false
        type: string
        default: 'ax18.txt'
      iDIY:
        description: 'DIY脚本：'
        required: false
        type: string
        default: 'diyconfig_ax18.sh'
      iUpdate_bin:
        description: '将固件上传到Artifact'
        required: false
        type: boolean
        default: true
      iRelease_FIRMWARE:
        description: '发布firmware'
        required: false
        type: boolean
        default: true
      iReset_password:
        description: '重置root密码'
        required: false
        type: boolean
        default: true

#环境变量配置
env:
  GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  CONFIG_FILE: ${{inputs.iCONFIG}}
  DIYCONFIG: ${{inputs.iDIY}}
  DIY_FEEDS: diy_feeds.sh  # 主要用于更新Feeds
  GENERAL_CONFIG: GENERAL.txt   # 通用配置
  DIYPackages: Packages.sh
  CLASH_KERNEL: amd64
  CACHE_TOOLCHAIN: true
  FREE_UP_DISK: true
  UPLOAD_BIN_DIR: ${{inputs.iUpdate_bin}}
  FIRMWARE_RELEASE: ${{inputs.iRelease_FIRMWARE}}
  IS_RESET_PASSWORD: ${{inputs.iReset_password}}
  IS_RESIZE_SPACE: false # 磁盘扩容，非必要不使用
  TZ: Asia/Shanghai
  CONFIGS_DIR: Config
  SCRIPTS_DIR: Scripts
  
#CI权限
permissions: write-all

jobs:
  build:
    runs-on: ubuntu-22.04
    if: github.event.repository.owner.id == github.event.sender.id
    steps:

    - name: Check Server Performance (检查服务器性能)
      run: |
        echo "警告⚠"
        echo "分配的服务器性能有限，若选择的插件过多，务必注意CPU性能！"
        echo -e "已知CPU型号（降序）：7763，8370C，8272CL，8171M，E5-2673 \n"
        echo "--------------------------CPU信息--------------------------"
        echo "CPU物理数量：$(cat /proc/cpuinfo | grep "physical id" | sort | uniq | wc -l)"
        echo -e "CPU核心信息：$(cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c) \n"
        echo "--------------------------内存信息--------------------------"
        echo "已安装内存详细信息："
        echo -e "$(sudo lshw -short -C memory | grep GiB) \n"
        echo "--------------------------硬盘信息--------------------------"
        echo "硬盘数量：$(ls /dev/sd* | grep -v [1-9] | wc -l)" && df -hT

    - name: Free Disk Space
      if: env.FREE_UP_DISK == true
      uses: endersonmenezes/free-disk-space@main
      with:
        remove_android: true
        remove_dotnet: true
        remove_haskell: true
        remove_tool_cache: true
        remove_swap: true
        remove_packages: "android* azure* clang* dotnet* firefox* ghc* golang* google* libclang* libgl1* lld* llvm* microsoft* mongodb* mono* mysql* nodejs* openjdk* php* postgresql* powershell* snap* temurin* yarn* zulu*"
        remove_packages_one_command: true
        remove_folders: "/etc/apt/sources.list.d* /etc/mono* /etc/mysql* /usr/include/linux/android* /usr/lib/llvm* /usr/lib/mono* /usr/local/lib/android* /usr/local/lib/node_modules* /usr/local/share/chromium* /usr/local/share/powershell* /usr/local/share/vcpkg/ports/azure* /usr/local/share/vcpkg/ports/google* /usr/local/share/vcpkg/ports/libpq/android* /usr/local/share/vcpkg/ports/llvm* /usr/local/share/vcpkg/ports/mysql* /usr/local/share/vcpkg/ports/snap* /usr/share/azure* /usr/share/dotnet* /usr/share/glade* /usr/share/miniconda* /usr/share/php* /usr/share/swift /var/lib/mysql* /var/log/azure*"
        testing: false

    - name: Initialization Environment (初始化环境)
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        docker rmi $(docker images -q)
        sudo rm -rf /usr/share/dotnet /etc/apt/sources.list.d /usr/local/lib/android $AGENT_TOOLSDIRECTORY
        sudo -E apt-get -y purge azure-cli ghc* zulu* llvm* firefox google* dotnet* powershell openjdk* mongodb* moby* || true
        sudo -E apt-get -y update
        sudo -E apt-get -y install $(curl -fsSL is.gd/depends_ubuntu_2204)
        sudo -E systemctl daemon-reload
        sudo -E apt-get -y autoremove --purge
        sudo -E apt-get -y clean
        sudo timedatectl set-timezone "$TZ"

    - name: Combine Disks (合并磁盘)
      uses: easimon/maximize-build-space@master
      if: env.IS_RESIZE_SPACE == true
      with:
        swap-size-mb: 1024
        temp-reserve-mb: 100
        root-reserve-mb: 1024

    - name: Checkout (下载当前源码)
      uses: actions/checkout@master

    - name: Check Scripts (搜索脚本并配置权限)
      run: |
        find ./ -maxdepth 3 -type f -iregex ".*\(txt\|sh\)$" -exec dos2unix {} \; -exec chmod +x {} \;

    - name: config git (修改git下载缓冲大小)
      run: |
        git config --global http.postBuffer 524288000
        git config --global http.lowSpeedLimit 0
        git config --global http.lowSpeedTime 999999

    - name: Clone Source Code (克隆源代码)
      run: |
        df -hT $GITHUB_WORKSPACE
        echo "【LinInfo】克隆源代码：【$REPO_BRANCH】$REPO_URL"
        git clone --depth=1 --single-branch --branch $REPO_BRANCH $REPO_URL openwrt
        cd openwrt
        bash $GITHUB_WORKSPACE/$SCRIPTS_DIR/$DIY_FEEDS
        echo "【LinInfo】feeds内容：$(cat ./feeds.conf.default)"
        echo "OPENWRT_PATH=$PWD" >> $GITHUB_ENV

    - name: Install Feeds (安装feeds)
      run: |
        cd $OPENWRT_PATH
        ./scripts/feeds update -a
        ./scripts/feeds install -a

    - name: Custom Packages (自定义包)
      run: |
        cd $OPENWRT_PATH/package
        echo "【LinInfo】设置自定义包：$GITHUB_WORKSPACE/$SCRIPTS_DIR/$DIYPackages"
        chmod +x "$GITHUB_WORKSPACE/$SCRIPTS_DIR/$DIYPackages"
        bash "$GITHUB_WORKSPACE/$SCRIPTS_DIR/$DIYPackages"

    - name: Generate Variables (加载配置)
      run: |
        echo '【LinInfo】移除所有.config并添加新的.config'
        cd $OPENWRT_PATH
        rm -rf ./tmp* ./.config*
        cat $GITHUB_WORKSPACE/$CONFIGS_DIR/$GENERAL_CONFIG $GITHUB_WORKSPACE/$CONFIGS_DIR/$CONFIG_FILE >> .config
        
    - name: Configuration Customization (加载自定义配置)
      run: |
        echo $PWD
        cd $OPENWRT_PATH
        cp $GITHUB_WORKSPACE/$SCRIPTS_DIR/patch/custom_usage.txt $OPENWRT_PATH/custom_usage.txt
        if [ -e "$GITHUB_WORKSPACE/$SCRIPTS_DIR/$DIYCONFIG" ]; then
          echo "【LinInfo】加载自定义配置成功：$GITHUB_WORKSPACE/$SCRIPTS_DIR/$DIYCONFIG"
          chmod +x "$GITHUB_WORKSPACE/$SCRIPTS_DIR/$DIYCONFIG"
          bash "$GITHUB_WORKSPACE/$SCRIPTS_DIR/$DIYCONFIG"
        fi

    - name: defconfig (确认配置)
      working-directory: ./openwrt
      run: |
        make defconfig
        ./scripts/diffconfig.sh > seed.config
        echo "【LinInfo】make defconfig后配置文件为："
        echo "$(cat .config)"


    - name: Read Variables (读取变量)
      run: |
        cd $OPENWRT_PATH
        export WRT_VER=$(echo $REPO_URL | cut -d '/' -f 5-)-$REPO_BRANCH
        echo "WRT_VER=$WRT_VER" >> $GITHUB_ENV
        VERSION_INFO=$(git show -s --date=short --format="作者: %an<br/>时间: %cd<br/>内容: %s<br/>hash: %H")
        echo "VERSION_INFO=$VERSION_INFO" >> $GITHUB_ENV
        SOURCE_REPO="$(echo $REPO_URL | awk -F '/' '{print $(NF)}')"
        echo "SOURCE_REPO=$SOURCE_REPO" >> $GITHUB_ENV
        path_config_file="$OPENWRT_PATH/.config"
        device_name_list=()
        while IFS= read -r line
        do
          if [[ $line =~ ^(CONFIG_TARGET_DEVICE_|CONFIG_TARGET_)([^_]+)_([^_]+)_DEVICE_([^=]+)=y$ ]]; then
            prefix=${BASH_REMATCH[1]} 
            platform=${BASH_REMATCH[2]}
            subplatform=${BASH_REMATCH[3]}
            deviceName=${BASH_REMATCH[4]}
            device_name_list+=("$deviceName")
            DEVICE_TARGET=$platform
            DEVICE_SUBTARGET=$subplatform
          fi
        done < "$path_config_file"
        DEVICE_PROFILE=$(IFS=$'、'; echo "${device_name_list[*]}")
        DEVICE_NAME_LIST=$(IFS=$' '; echo "${device_name_list[*]}")
        DEVICE_NAME_LIST_LIAN=$(IFS=$'-'; echo "${device_name_list[*]}")
        echo "DEVICE_TARGET=$DEVICE_TARGET" >> $GITHUB_ENV
        echo "DEVICE_SUBTARGET=$DEVICE_SUBTARGET" >> $GITHUB_ENV
        echo "DEVICE_PROFILE=$DEVICE_PROFILE" >> $GITHUB_ENV
        echo "DEVICE_NAME_LIST=$DEVICE_NAME_LIST" >> $GITHUB_ENV
        echo "DEVICE_NAME_LIST_LIAN=$DEVICE_NAME_LIST_LIAN" >> $GITHUB_ENV
        dir_linux_version="$OPENWRT_PATH/target/linux/"
        dir_linux_device_target=$(find "$dir_linux_version" -type d -name "$DEVICE_TARGET" -print)
        KERNEL_PATCHVER=''
        if [ -n "$dir_linux_device_target" ]; then
          MAKEFILE_PATH="$dir_linux_device_target/Makefile"
          if [ -f "$MAKEFILE_PATH" ]; then
            KERNEL_PATCHVER=$(grep -E "KERNEL_PATCHVER[:=]+" $MAKEFILE_PATH | awk -F ':=' '{print $2}' | tr -d ' ')
          else
            echo "【LinInfo】文件不存在：$MAKEFILE_PATH"
          fi
        fi
        if [ -n "$KERNEL_PATCHVER" ]; then
          echo "【LinInfo】主版本KERNEL_PATCHVER：$KERNEL_PATCHVER"
        else
          echo "【LinInfo】主版本KERNEL_PATCHVER为空，取6.1"
          KERNEL_PATCHVER=6.1
        fi
        if [ -f "$OPENWRT_PATH/include/kernel-$KERNEL_PATCHVER" ]; then
          VERSION_KERNEL=$(grep -oP 'LINUX_KERNEL_HASH-\K[0-9]+\.[0-9]+\.[0-9]+' ./include/kernel-$KERNEL_PATCHVER)
          echo "VERSION_KERNEL=$VERSION_KERNEL" >> $GITHUB_ENV
          echo "【LinInfo】内核版本：$VERSION_KERNEL"
        else
          echo "【LinInfo】文件不存在：$OPENWRT_PATH/include/kernel-$KERNEL_PATCHVER"
        fi
        echo "【LinInfo】编译DEVICE：$DEVICE_TARGET-$DEVICE_SUBTARGET-$DEVICE_PROFILE"

    - name: Download tools (下载工具包) 
      working-directory: ./openwrt
      run: |
        echo "【LinInfo】下载工具，DEVICE：$DEVICE_TARGET-$DEVICE_SUBTARGET-$DEVICE_PROFILE"
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;
        
    - name: 编译固件 Build firmware
      id: compile
      working-directory: ./openwrt
      run: |
        echo -e "$(nproc) thread build."
        make -j$(nproc) || make -j1 V=s
        echo "status=success" >> $GITHUB_OUTPUT
        echo "DATE=$(date +"%Y-%m-%d %H:%M:%S")" >> $GITHUB_ENV
        echo "FILE_DATE=$(date +"%Y.%m.%d")" >> $GITHUB_ENV
        export WRT_DATE=$(TZ=UTC-8 date +"%y.%m.%d_%H.%M.%S")
        echo "WRT_DATE=$WRT_DATE" >> $GITHUB_ENV

    - name: Machine Information
      run: |
        cd $OPENWRT_PATH
        echo "======================="
        lscpu | grep -E "name|Core|Thread"
        echo "======================="
        df -h
        echo "======================="
        du -h --max-depth=1
        echo "======================="

    - name: Organize Files(整理文件)
      if: steps.compile.outputs.status == 'success'
      run: |
        cd $OPENWRT_PATH && mkdir ./upload/
        cp -f ./.config ./upload/Config_"$DEVICE_SUBTARGET"_"$DEVICE_NAME_LIST_LIAN"_"$WRT_VER"_"$WRT_DATE".txt
        cp -f ./seed.config ./upload/Config_"$DEVICE_SUBTARGET"_"$DEVICE_NAME_LIST_LIAN"_"$WRT_VER"_"$WRT_DATE".seed.txt
        find ./bin/targets/ -iregex ".*\(buildinfo\|json\|manifest\|sha256sums\|packages\)$" -exec rm -rf {} +
        echo "【LinInfo】设备信息：$DEVICE_NAME_LIST"
        for TYPE in $DEVICE_NAME_LIST ; do
          echo "【LinInfo】"
          for FILE in $(find ./bin/targets/ -type f -iname "*$TYPE*.*") ; do
            EXT=$(basename $FILE | cut -d '.' -f 2-)
            NAME=$(basename $FILE | cut -d '.' -f 1 | grep -io "\($TYPE\).*")
            NEW_FILE="$DEVICE_SUBTARGET"_"$WRT_VER"_"$NAME"_"$WRT_DATE"."$EXT"
            mv -f $FILE ./upload/$NEW_FILE
          done
        done
        find ./bin/targets/ -type f -exec mv -f {} ./upload/ \;

    - name: Upload Firmware To Artifact(将固件上传到Artifact)
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_BIN_DIR == true
      uses: actions/upload-artifact@main
      with:
        name: ${{ env.DEVICE_TARGET }}-${{ env.DEVICE_SUBTARGET }}-${{ env.DEVICE_NAME_LIST_LIAN }}-${{ env.FILE_DATE }}-Firmware
        path: ${{ env.OPENWRT_PATH }}/upload

    - name: Upload Firmware To Release(发布固件)
      if: steps.compile.outputs.status == 'success' && (env.FIRMWARE_RELEASE == true || env.FIRMWARE_RELEASE == 'true')
      uses: softprops/action-gh-release@v2
      with:
        name: R${{ env.DATE }} for ${{ env.DEVICE_SUBTARGET }}
        tag_name: R${{ env.DATE }}_${{ env.DEVICE_SUBTARGET }}
        files: ./openwrt/upload/*.*
        body: |
          **This is OpenWrt Firmware for ${{ env.DEVICE_PROFILE }}**
          ### 📒 固件信息(无WIFI)
          - 无WIFI带有线NSS的${{ env.VERSION_KERNEL }}内核固件
          - 💻 这是 ${{ env.DEVICE_SUBTARGET }} 平台使用的 OpenWrt 固件
          - 💻 适配设备: ${{ env.DEVICE_PROFILE }}
          - ⚽ 固件源码: ${{ env.REPO_URL }}
          - 💝 源码分支: ${{ env.REPO_BRANCH }}
          - 🌐 默认地址: 192.168.0.1
          - 🔑 默认密码: 无|password
          ### 🧊 固件版本
          - 固件内核：${{ env.VERSION_KERNEL }}
          - 固件编译前最后一次➦[主源码](${{ env.REPO_URL }})更新记录
          - ${{ env.VERSION_INFO }}
