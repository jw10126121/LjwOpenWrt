#=================================================
# Description: Build OpenWrt using GitHub Actions
# Lisence: MIT
#=================================================

name:  CORE-ALL

on:
  workflow_call:
    inputs:
      WRT_REPO_URL:
        required: true
        type: string
      WRT_REPO_BRANCH:
        required: true
        type: string
      WRT_REPO_Commit_Hash:
        required: true
        type: string
      WRT_CONFIG:
        required: true
        type: string
      WRT_DIY_SETTING:
        required: true
        type: string
      WRT_DIY_FEEDS:
        required: true
        type: string
        default: diy_feeds.sh
      WRT_GENERAL_CONFIG:
        required: true
        type: string
      WRT_DIYPackages:
        required: true
        type: string
      WRT_RELEASE_FIRMWARE:
        required: true
        type: boolean
      WRT_DEFAULT_LANIP:
        required: true
        type: string
      WRT_MINE_SAY:
        required: true
        type: string
      WRT_TOKEN_DINGDING:
        required: false
        type: string
    secrets:
      DINGDING_TOKEN: 
        required: false
      # UPLOAD_FIRMWARE_DIR:
      #   required: false
      #   type: boolean
      #   default: true
        
#环境变量配置
env:
  DINGDING_TOKEN: ${{ secrets.DINGDING_TOKEN }}
  WRT_REPO_URL: ${{ inputs.WRT_REPO_URL }}
  WRT_REPO_BRANCH: ${{ inputs.WRT_REPO_BRANCH }}
  WRT_REPO_Commit_Hash: ${{inputs.WRT_REPO_Commit_Hash}}
  WRT_CONFIG: ${{inputs.WRT_CONFIG}}           # 配置文件
  WRT_DIY_SETTING: ${{ inputs.WRT_DIY_SETTING }}           # 自定义配置
  WRT_DIY_FEEDS: ${{ inputs.WRT_DIY_FEEDS || 'diy_feeds.sh' }}                         # 主要用于更新Feeds
  WRT_GENERAL_CONFIG: ${{ inputs.WRT_GENERAL_CONFIG }}     # 通用配置
  WRT_DIYPackages: ${{inputs.WRT_DIYPackages}}          # 自定义包配置
  WRT_RELEASE_FIRMWARE: ${{inputs.WRT_RELEASE_FIRMWARE}} # 发布固件
  WRT_DEFAULT_LANIP: ${{inputs.WRT_DEFAULT_LANIP}}       # 默认lanIP
  WRT_MINE_SAY: ${{inputs.WRT_MINE_SAY}} 
  WRT_DIR_CONFIGS: Config                             # 自定义配置文件夹
  WRT_DIR_SCRIPTS: Scripts                            # 脚本文件夹
  UPLOAD_FIRMWARE_DIR: true
  TZ: Asia/Shanghai                               # 默认时区
  IS_RESET_PASSWORD: true                         # 是否把密码重置为空
  UPLOAD_BIN_DIR: false                           # 是否上传编译后的bin目录，因整理编译后的文件设置了UPLOAD_FIRMWARE_DIR，所以不上传整个bin目录
  IS_RESIZE_SPACE: false                          # 是否扩容空间，一般编译内容不多，可以不扩容，减少资源浪费
  CACHE_TOOLCHAIN: true
  CLASH_KERNEL: amd64
  FREE_UP_DISK: true
  WRT_HAS_WIFI: true
  UPLOAD_BIN_DIR_WSS: false


  
#CI权限
permissions: write-all

jobs:
  build:
    runs-on: ubuntu-22.04
    if: github.event.repository.owner.id == github.event.sender.id
    steps:

    - name: Check Server Performance (检查服务器性能)
      run: |
        echo "警告⚠"
        echo "分配的服务器性能有限，若选择的插件过多，务必注意CPU性能！"
        echo -e "已知CPU型号（降序）：7763，8370C，8272CL，8171M，E5-2673 \n"
        echo "--------------------------CPU信息--------------------------"
        echo "CPU物理数量：$(cat /proc/cpuinfo | grep "physical id" | sort | uniq | wc -l)"
        echo -e "CPU核心信息：$(cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c) \n"
        echo "--------------------------内存信息--------------------------"
        echo "已安装内存详细信息："
        echo -e "$(sudo lshw -short -C memory | grep GiB) \n"
        echo "--------------------------硬盘信息--------------------------"
        echo "硬盘数量：$(ls /dev/sd* | grep -v [1-9] | wc -l)" && df -hT
          
    - name: Check ENV (检查环境)
      run: |
        echo "编译说明：${{ env.WRT_MINE_SAY }}"
        WRT_HAS_WIFI=true
        WRT_HAS_WIFI_TEXT="有WIFI"
        if echo "$WRT_CONFIG" | grep -q "NOWIFI\|WIFINO\|NO-WIFI\|WIFI-NO"; then
          WRT_HAS_WIFI=false
          WRT_HAS_WIFI_TEXT="无WIFI"
        fi
        echo "WRT_HAS_WIFI=$WRT_HAS_WIFI" >> $GITHUB_ENV
        echo "WRT_HAS_WIFI_TEXT=$WRT_HAS_WIFI_TEXT" >> $GITHUB_ENV
        WRT_HAS_LITE=false
        WRT_HAS_LITE_TEXT="[常规版]"
        if echo "$WRT_CONFIG" | grep -q "lite\|LITE"; then
          WRT_HAS_LITE=true
          WRT_HAS_LITE_TEXT="[精简版]"
        fi
        echo "WRT_HAS_LITE=$WRT_HAS_LITE" >> $GITHUB_ENV
        echo "WRT_HAS_LITE_TEXT=$WRT_HAS_LITE_TEXT" >> $GITHUB_ENV
        
    - name: Check DINGDING_TOKEN (检查钉钉TOKEN)
      run: |
        echo "钉钉TOKEN_secrets: ${{secrets.DINGDING_TOKEN}}"
        echo "钉钉TOKEN_env: ${{env.DINGDING_TOKEN}}"
        if [ -n "${{inputs.WRT_TOKEN_DINGDING}}" ]; then
            echo "DINGDING_TOKEN=${{inputs.WRT_TOKEN_DINGDING}}" >> $GITHUB_ENV
            echo "【LinInfo】配置TOKEN_DINGDING：${{inputs.WRT_TOKEN_DINGDING}}"
        fi
        
    - name: Free Disk Space
      if: env.FREE_UP_DISK == true || env.FREE_UP_DISK == 'true'
      uses: endersonmenezes/free-disk-space@main
      with:
        remove_android: true
        remove_dotnet: true
        remove_haskell: true
        remove_tool_cache: true
        remove_swap: true
        remove_packages: "android* azure* clang* dotnet* firefox* ghc* golang* google* libclang* libgl1* lld* llvm* microsoft* mongodb* mono* mysql* nodejs* openjdk* php* postgresql* powershell* snap* temurin* yarn* zulu*"
        remove_packages_one_command: true
        remove_folders: "/etc/apt/sources.list.d* /etc/mono* /etc/mysql* /usr/include/linux/android* /usr/lib/llvm* /usr/lib/mono* /usr/local/lib/android* /usr/local/lib/node_modules* /usr/local/share/chromium* /usr/local/share/powershell* /usr/local/share/vcpkg/ports/azure* /usr/local/share/vcpkg/ports/google* /usr/local/share/vcpkg/ports/libpq/android* /usr/local/share/vcpkg/ports/llvm* /usr/local/share/vcpkg/ports/mysql* /usr/local/share/vcpkg/ports/snap* /usr/share/azure* /usr/share/dotnet* /usr/share/glade* /usr/share/miniconda* /usr/share/php* /usr/share/swift /var/lib/mysql* /var/log/azure*"
        testing: false

    - name: Initialization Environment (初始化环境)
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        docker rmi $(docker images -q)
        sudo rm -rf /usr/share/dotnet /etc/apt/sources.list.d /usr/local/lib/android $AGENT_TOOLSDIRECTORY
        sudo -E apt-get -y purge azure-cli ghc* zulu* llvm* firefox google* dotnet* powershell openjdk* mongodb* moby* || true
        sudo -E apt-get -y update
        sudo -E apt -yqq install dos2unix
        sudo -E apt-get -y install $(curl -fsSL is.gd/depends_ubuntu_2204)
        sudo -E systemctl daemon-reload
        sudo -E apt-get -y autoremove --purge
        sudo -E apt-get -y clean
        sudo timedatectl set-timezone "$TZ"

    - name: Combine Disks (合并磁盘)
      uses: easimon/maximize-build-space@master
      if: env.IS_RESIZE_SPACE == true || env.IS_RESIZE_SPACE == 'true'
      with:
        swap-size-mb: 1024
        temp-reserve-mb: 100
        root-reserve-mb: 1024

    - name: Checkout (下载当前源码)
      uses: actions/checkout@master

    - name: Check Scripts (搜索脚本并配置权限)
      run: |
        echo "【LinInfo】配置脚本执行权限..."
        find ./ -maxdepth 3 -type f -iregex ".*\(txt\|sh\)$" -exec dos2unix {} \; -exec chmod +x {} \;

    - name: config git (修改git下载缓冲大小)
      run: |
        git config --global http.postBuffer 524288000
        git config --global http.lowSpeedLimit 0
        git config --global http.lowSpeedTime 999999

    - name: Clone Source Code (克隆源代码)
      run: |
        df -hT $GITHUB_WORKSPACE
        COMPILE_DATE=$(date +"%y%m%d")
        COMPILE_TIME=$(date +"D%y%m%dT%H%M%S")
        COMPILE_DATE_HOUR=$(date +"D%y%m%dT%H%M")
        echo "COMPILE_DATE=$COMPILE_DATE" >> $GITHUB_ENV
        echo "COMPILE_TIME=$COMPILE_TIME" >> $GITHUB_ENV
        echo "COMPILE_DATE_HOUR=$COMPILE_DATE_HOUR" >> $GITHUB_ENV
        echo "【LinInfo】编译日期：$COMPILE_DATE；编译时间：$COMPILE_TIME；编译时间(精确到分钟)：$COMPILE_DATE_HOUR"
        echo "【LinInfo】克隆源代码：【$WRT_REPO_BRANCH】$WRT_REPO_URL"
        git clone --depth=1 --single-branch --branch $WRT_REPO_BRANCH $WRT_REPO_URL openwrt
        cd openwrt
        if [ -n "${{ env.WRT_REPO_Commit_Hash }}" ]; then
          echo "【LinInfo】GIT检出到指定版本：${{ env.WRT_REPO_Commit_Hash }}"
          git fetch --depth=1 origin ${{ env.WRT_REPO_Commit_Hash }}
          git checkout ${{ env.WRT_REPO_Commit_Hash }}
        fi
        REPO_GIT_HASH=$(git log -1 --pretty=format:'%H')
        echo "【LinInfo】GIT HASH：${REPO_GIT_HASH}"
        echo "REPO_GIT_HASH=$REPO_GIT_HASH" >> $GITHUB_ENV
        VERSION_INFO=$(git show -s --date=short --format="作者: %an<br/>时间: %cd<br/>内容: %s<br/>hash: %H")
        echo "VERSION_INFO=$VERSION_INFO" >> $GITHUB_ENV
        bash $GITHUB_WORKSPACE/$WRT_DIR_SCRIPTS/$WRT_DIY_FEEDS
        echo "【LinInfo】feeds内容：$(cat ./feeds.conf.default)"
        echo "OPENWRT_PATH=$PWD" >> $GITHUB_ENV
        echo "编译说明内容：${{ env.WRT_MINE_SAY }}"

    - name: Update Feeds (更新feeds)
      run: |
        cd $OPENWRT_PATH
        ./scripts/feeds update -a

    - name: Install Feeds (安装feeds)
      run: |
        cd $OPENWRT_PATH
        ./scripts/feeds install -a

    - name: Custom Packages (自定义包)
      run: |
        cd $OPENWRT_PATH/package
        echo "【LinInfo】设置自定义包：$GITHUB_WORKSPACE/$WRT_DIR_SCRIPTS/$WRT_DIYPackages"
        chmod +x "$GITHUB_WORKSPACE/$WRT_DIR_SCRIPTS/$WRT_DIYPackages"
        bash "$GITHUB_WORKSPACE/$WRT_DIR_SCRIPTS/$WRT_DIYPackages"

    - name: Generate Variables (加载配置)
      run: |
        echo '【LinInfo】移除所有.config并添加新的.config'
        cd $OPENWRT_PATH
        rm -rf ./tmp* ./.config*
        cat $GITHUB_WORKSPACE/$WRT_DIR_CONFIGS/$WRT_GENERAL_CONFIG $GITHUB_WORKSPACE/$WRT_DIR_CONFIGS/$WRT_CONFIG >> .config
        
    - name: Configuration Customization (加载自定义设置)
      run: |
        cd $OPENWRT_PATH
        echo "【LinInfo】当前路径：$PWD"
        cp $GITHUB_WORKSPACE/$WRT_DIR_SCRIPTS/patch/custom_usage.txt $OPENWRT_PATH/custom_usage.txt
        if [ -e "$GITHUB_WORKSPACE/$WRT_DIR_SCRIPTS/$WRT_DIY_SETTING" ]; then
          echo "【LinInfo】加载自定义配置成功：$GITHUB_WORKSPACE/$WRT_DIR_SCRIPTS/$WRT_DIY_SETTING"
          chmod +x "$GITHUB_WORKSPACE/$WRT_DIR_SCRIPTS/$WRT_DIY_SETTING"
          bash "$GITHUB_WORKSPACE/$WRT_DIR_SCRIPTS/$WRT_DIY_SETTING" -n "Linjw" -i "${{env.WRT_DEFAULT_LANIP}}" -p "${{env.IS_RESET_PASSWORD}}" -t "argon"
        else
          echo "【LinInfo】未找到DIY设置：$GITHUB_WORKSPACE/$WRT_DIR_SCRIPTS/$WRT_DIY_SETTING"
        fi
        cp -f .config my_config.txt

    - name: defconfig (确认配置)
      working-directory: ./openwrt
      run: |
        make defconfig
        ./scripts/diffconfig.sh > seed.config
        echo "【LinInfo】make defconfig后配置文件为："
        echo "$(cat .config)"

    - name: Read Variables (读取变量)
      run: |
        cd $OPENWRT_PATH
        the_repo=${WRT_REPO_URL%/}
        export WRT_VER="${the_repo##*/}"-$WRT_REPO_BRANCH
        echo "WRT_VER=$WRT_VER" >> $GITHUB_ENV
        SOURCE_REPO="$(echo $WRT_REPO_URL | awk -F '/' '{print $(NF)}')"
        echo "SOURCE_REPO=$SOURCE_REPO" >> $GITHUB_ENV
        path_config_file="$OPENWRT_PATH/.config"
        device_name_list=()
        while IFS= read -r line
        do
          if [[ $line =~ ^(CONFIG_TARGET_DEVICE_|CONFIG_TARGET_)([^_]+)_([^_]+)_DEVICE_([^=]+)=y$ ]]; then
            prefix=${BASH_REMATCH[1]} 
            platform=${BASH_REMATCH[2]}
            subplatform=${BASH_REMATCH[3]}
            deviceName=${BASH_REMATCH[4]}
            device_name_list+=("$deviceName")
            DEVICE_TARGET=$platform
            DEVICE_SUBTARGET=$subplatform
          fi
        done < "$path_config_file"
        DEVICE_PROFILE=$(IFS=$'、'; echo "${device_name_list[*]}")
        DEVICE_NAME_LIST=$(IFS=$' '; echo "${device_name_list[*]}")
        DEVICE_NAME_LIST_LIAN=$(IFS=$'_and_'; echo "${device_name_list[*]}")
        echo "DEVICE_TARGET=$DEVICE_TARGET" >> $GITHUB_ENV
        echo "DEVICE_SUBTARGET=$DEVICE_SUBTARGET" >> $GITHUB_ENV
        echo "DEVICE_PROFILE=$DEVICE_PROFILE" >> $GITHUB_ENV
        echo "DEVICE_NAME_LIST=$DEVICE_NAME_LIST" >> $GITHUB_ENV
        echo "DEVICE_NAME_LIST_LIAN=$DEVICE_NAME_LIST_LIAN" >> $GITHUB_ENV
        DEVICE_ARCH=$(grep -oP '^CONFIG_TARGET_ARCH_PACKAGES="\K[^"]*' $path_config_file)
        echo "DEVICE_ARCH=$DEVICE_ARCH" >> $GITHUB_ENV
        dir_linux_version="$OPENWRT_PATH/target/linux/"
        dir_linux_device_target=$(find "$dir_linux_version" -type d -name "$DEVICE_TARGET" -print -prune)
        KERNEL_PATCHVER=''
        MAKEFILE_PATH="$dir_linux_device_target/Makefile"
        if [ -f "$MAKEFILE_PATH" ]; then
          KERNEL_PATCHVER=$(grep -E "KERNEL_PATCHVER[:=]+" $MAKEFILE_PATH | awk -F ':=' '{print $2}' | tr -d ' ')
        else
          echo "【LinInfo】文件不存在：$MAKEFILE_PATH"
        fi
        if [ -n "$KERNEL_PATCHVER" ]; then
          echo "【LinInfo】主版本KERNEL_PATCHVER：$KERNEL_PATCHVER"
        else
          echo "【LinInfo】主版本KERNEL_PATCHVER为空，取6.1"
          KERNEL_PATCHVER=6.1
        fi
        if [ -f "$OPENWRT_PATH/include/kernel-$KERNEL_PATCHVER" ]; then
          VERSION_KERNEL=$(grep -oP 'LINUX_KERNEL_HASH-\K[0-9]+\.[0-9]+\.[0-9]+' ./include/kernel-$KERNEL_PATCHVER)
          echo "VERSION_KERNEL=$VERSION_KERNEL" >> $GITHUB_ENV
          echo "【LinInfo】内核版本：$VERSION_KERNEL"
        else
          echo "【LinInfo】文件不存在：$OPENWRT_PATH/include/kernel-$KERNEL_PATCHVER"
        fi
        echo "【LinInfo】编译DEVICE：$DEVICE_TARGET-$DEVICE_SUBTARGET-$DEVICE_PROFILE"
        name_config_file="Config_${DEVICE_SUBTARGET}_${DEVICE_NAME_LIST_LIAN}_${WRT_VER}_${COMPILE_TIME}"
        echo "name_config_file=$name_config_file" >> $GITHUB_ENV
        echo "【LinInfo】配置文件名为：$name_config_file"
        mkdir -p ./config_mine
        cp -f ./my_config.txt ./config_mine/${name_config_file}_mine.txt
        cp -f ./.config ./config_mine/"$name_config_file"_full.txt
        awk '!/^#/ && !/^$/' ./.config > ./config_mine/"$name_config_file".txt
        cp -f ./seed.config ./config_mine/"$name_config_file".seed.txt
        release_content="\
        固件类型：${{ env.WRT_HAS_LITE_TEXT }}\n\
        支持设备：${DEVICE_PROFILE}\n\
        支持平台：${DEVICE_TARGET}-${DEVICE_SUBTARGET}\n\
        设备架构：${DEVICE_ARCH}\n\
        内核版本：${VERSION_KERNEL}\n\
        默认LAN-IP：${{env.WRT_DEFAULT_LANIP}}\n\
        默认密码：无 | password\n\
        是否WIFI：${{env.WRT_HAS_WIFI_TEXT}}\n\
        源码：${WRT_REPO_URL}\n\
        源码分支：${WRT_REPO_BRANCH}\n\
        源码HASH：${REPO_GIT_HASH}\
        "
        echo "release_content=${release_content}" >> $GITHUB_ENV
        echo -e "【LinInfo】\n${release_content}"
        if [ -e "$GITHUB_WORKSPACE/$WRT_DIR_SCRIPTS/readme.sh" ]; then
          chmod +x "$GITHUB_WORKSPACE/$WRT_DIR_SCRIPTS/readme.sh"
          TO_MY_SAY_DETAIL_tmp="
          ${{ env.WRT_MINE_SAY }}\n\
          ${release_content}\n\
          编译开始时间：${COMPILE_TIME}\
          "
          TO_MY_SAY_DETAIL=$(echo -e $TO_MY_SAY_DETAIL_tmp)
          bash "$GITHUB_WORKSPACE/$WRT_DIR_SCRIPTS/readme.sh" "./.config" "./config_mine/readme.txt" "$TO_MY_SAY_DETAIL"
        fi
        release_desc_file=$OPENWRT_PATH/config_mine/readme.txt
        echo "release_desc_file=${release_desc_file}" >> $GITHUB_ENV
        # 把内容保存到环境变量release_content中
        #echo 'release_content_tmp<<EOF' >> $GITHUB_ENV
        #cat "${{ env.release_desc_file}}" >> $GITHUB_ENV
        #echo 'EOF' >> $GITHUB_ENV


    - name: Send dingding notify
      continue-on-error: true
      uses: zcong1993/actions-ding@master
      if: env.DINGDING_TOKEN != ''
      with:
        dingToken: ${{ env.DINGDING_TOKEN }}
        body: |
          {
            "msgtype": "text",
            "text": {
                "content": "编译开始：${{ env.COMPILE_TIME }}\n\n${{ env.release_content }}"
             }
          }
          
    - name: Upload Config (上传配置文件)
      id: config_upload
      uses: actions/upload-artifact@master
      with:
        name: config_${{ env.DEVICE_SUBTARGET }}_${{ env.DEVICE_NAME_LIST_LIAN }}_${{ env.COMPILE_DATE_HOUR }}
        path: openwrt/config_mine

    - name: Download tools (下载工具包) 
      working-directory: ./openwrt
      run: |
        echo "【LinInfo】下载工具，DEVICE：$DEVICE_TARGET-$DEVICE_SUBTARGET-$DEVICE_PROFILE"
        make download -j8
        find dl -size -1024c -exec ls -l {} \;
        find dl -size -1024c -exec rm -f {} \;
        
    - name: 编译固件 Build firmware
      id: compile
      working-directory: ./openwrt
      run: |
        echo -e "$(nproc) thread build."
        make -j$(nproc) V=s || make -j1 V=s
        echo "status=success" >> $GITHUB_OUTPUT
        echo "FILE_DATE=$(date +"%y%m%d")" >> $GITHUB_ENV
        FILE_TIME=$(date +"D%y%m%dT%H%M%S")
        echo "FILE_TIME=$FILE_TIME" >> $GITHUB_ENV
        echo "【LinInfo】$DEVICE_SUBTARGET-$DEVICE_PROFILE编译完成，完成时间：$FILE_TIME"

    - name: Machine Information
      continue-on-error: true
      run: |
        cd $OPENWRT_PATH
        echo "======================="
        lscpu | grep -E "name|Core|Thread"
        echo "======================="
        df -h
        echo "======================="
        du -h --max-depth=1
        echo "======================="
        
    - name: Upload bin directory
      continue-on-error: true
      id: all_upload
      uses: actions/upload-artifact@master
      if: steps.compile.outputs.status == 'success' && (env.UPLOAD_BIN_DIR == true || env.UPLOAD_BIN_DIR == 'true')
      with:
        name: bin_${{ env.DEVICE_SUBTARGET }}_${{ env.DEVICE_NAME_LIST_LIAN }}_${{ env.COMPILE_DATE_HOUR }}
        path: openwrt/bin
        
    - name: Upload all bin datas to wss
      id: all_upload_wss
      continue-on-error: true
      if: steps.compile.outputs.status == 'success' && (env.UPLOAD_BIN_DIR_WSS == true || env.UPLOAD_BIN_DIR_WSS == 'true')
      run: |
        curl -fsSL git.io/file-transfer | sh
        ./transfer wss -s -p 16 --no-progress "${{ env.OPENWRT_PATH }}/bin/" 2>&1 | tee wss_all.log
        bin_download_url=$(cat wss_all.log | grep "Download Link: " | cut -f3 -d" ")
        echo "下载地址：$bin_download_url_all"
        echo "bin_download_url_all=${bin_download_url_all}" >> $GITHUB_OUTPUT
        echo "bin_download_url_all=${bin_download_url_all}" >> $GITHUB_ENV

    - name: Organize Files(整理文件)
      id: organize
      if: steps.compile.outputs.status == 'success'
      run: |
        cd $OPENWRT_PATH && mkdir -p ./upload ./upload/packages
        # 重新配置readme.txt(加入编译完成时间)
        rm -fr "./config_mine/readme.txt"
        if [ -e "$GITHUB_WORKSPACE/$WRT_DIR_SCRIPTS/readme.sh" ]; then
          chmod +x "$GITHUB_WORKSPACE/$WRT_DIR_SCRIPTS/readme.sh"
          TO_MY_SAY_DETAIL_tmp="
          ${{ env.WRT_MINE_SAY }}\n\
          ${{ env.release_content }}\n\
          编译开始时间：${{ env.COMPILE_TIME }}\n\
          编译完成时间：${{ env.FILE_TIME }}\
          "
          TO_MY_SAY_DETAIL=$(echo -e $TO_MY_SAY_DETAIL_tmp)
          bash "$GITHUB_WORKSPACE/$WRT_DIR_SCRIPTS/readme.sh" "./.config" "./config_mine/readme.txt" "$TO_MY_SAY_DETAIL"
        fi
        release_desc_file=$OPENWRT_PATH/config_mine/readme.txt
        echo "release_desc_file=${release_desc_file}" >> $GITHUB_ENV
        cp -f ./config_mine/* ./upload/
        TMP_DIR=$(mktemp -d)
        find ./bin/packages/ -type f \( -name "*.ipk" -o -name "*.apk" \) -exec mv -f {} "$TMP_DIR" \;
        find ./bin/targets/ -type f \( -name "*.ipk" -o -name "*.apk" \) -exec mv -f {} "$TMP_DIR" \;
        find ./bin/targets/ -iregex ".*\(buildinfo\|json\|manifest\|sha256sums\|packages\)$" -exec rm -rf {} +
        find ./bin/targets/ -iregex ".*\(initramfs-uImage\).*" -exec rm -rf {} +
        bash $GITHUB_WORKSPACE/$WRT_DIR_SCRIPTS/Organize_Packages.sh "$TMP_DIR"
        tar -zcf ./upload/Packages.tar.gz -C "$TMP_DIR" --transform 's,^./,,' .
        rm -rf "$TMP_DIR"
        rm -rf ./upload/packages
        echo "【LinInfo】设备信息：$DEVICE_NAME_LIST"
        for TYPE in $DEVICE_NAME_LIST ; do
          echo "【LinInfo】TYPE: $TYPE============================================"
          for FILE in $(find ./bin/targets/ -type f -iname "*$TYPE*.*") ; do
            EXT=$(basename $FILE | cut -d '.' -f 2-)
            NAME=$(basename $FILE | cut -d '.' -f 1 | grep -io "\($TYPE\).*")
            NEW_FILE="$DEVICE_SUBTARGET"_"$NAME"_"$WRT_VER"_"$COMPILE_TIME"."$EXT"
            echo "【LinInfo】文件：$FILE"
            echo "【LinInfo】改名后：$NEW_FILE"
            echo "【LinInfo】-----------------------------------------------------"
            mv -f $FILE ./upload/$NEW_FILE
          done
        done
        find ./bin/targets/ -type f -not -name '*openwrt-imagebuilder*' -exec mv -f {} ./upload/ \;
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Upload bin to wss
      id: upload_url
      continue-on-error: true
      if: steps.organize.outputs.status == 'success' && !cancelled()
      run: |
        curl -fsSL git.io/file-transfer | sh
        ./transfer wss -s -p 16 --no-progress "${{ env.OPENWRT_PATH }}/upload/" 2>&1 | tee wss.log
        bin_download_url=$(cat wss.log | grep "Download Link: " | cut -f3 -d" ")
        echo "下载地址：$bin_download_url"
        echo "bin_download_url=${bin_download_url}" >> $GITHUB_OUTPUT
        echo "bin_download_url=${bin_download_url}" >> $GITHUB_ENV

    - name: Create Notification Content (创建推送内容)
      id: notification_content
      continue-on-error: true
      run: |
        echo "【LinInfo】配置通知content"
        # 把内容保存到环境变量release_content中
        echo 'release_content<<EOF' >> $GITHUB_ENV
        cat "${{ env.release_desc_file}}" >> $GITHUB_ENV
        echo 'EOF' >> $GITHUB_ENV
        notify_content="\
        临时下载地址：${{env.bin_download_url}}\n\
        ${{env.release_content}}\
        "
        echo "notify_content=${notify_content}" >> $GITHUB_ENV
        
    - name: Send dingding notify
      continue-on-error: true
      uses: zcong1993/actions-ding@master
      if: env.DINGDING_TOKEN != '' && steps.upload_url.outputs.bin_download_url != ''
      with:
        dingToken: ${{ env.DINGDING_TOKEN }}
        body: |
          {
            "msgtype": "text",
            "text": {
                "content": "${{ env.notify_content }}"
             }
          }

    - name: Upload Firmware To Artifact(将固件上传到Artifact)
      id: upload
      continue-on-error: true
      if: steps.compile.outputs.status == 'success' && (env.UPLOAD_FIRMWARE_DIR == true || env.UPLOAD_FIRMWARE_DIR == 'true')
      uses: actions/upload-artifact@main
      with:
        name: ${{ env.DEVICE_SUBTARGET }}_${{ env.DEVICE_NAME_LIST_LIAN }}_${{ env.COMPILE_DATE_HOUR }}_Firmware
        path: ${{ env.OPENWRT_PATH }}/upload

    - name: Prepare Release Body (准备发布内容)
      run: |
        echo "【LinInfo】发布内容: ${{ env.release_desc_file }}"
        the_release_content=$(cat ${{ env.release_desc_file }})
        echo "${the_release_content}"
        # 把内容保存到环境变量release_content中
        #echo 'release_content<<EOF' >> $GITHUB_ENV
        #cat "$release_desc_file" >> $GITHUB_ENV
        #echo 'EOF' >> $GITHUB_ENV

    - name: Upload Firmware To Release(发布固件)
      if: steps.compile.outputs.status == 'success' && (env.WRT_RELEASE_FIRMWARE == true || env.WRT_RELEASE_FIRMWARE == 'true')
      uses: softprops/action-gh-release@v2
      with:
        name: ${{ env.COMPILE_DATE_HOUR }} for ${{ env.DEVICE_SUBTARGET }}
        tag_name: ${{ env.COMPILE_DATE_HOUR }}_${{ env.DEVICE_SUBTARGET }}
        files: ${{ env.OPENWRT_PATH }}/upload/*.*
        body_path: ${{ env.release_desc_file }}
        # body: |
        #   **This is OpenWrt Firmware for ${{ env.DEVICE_PROFILE }}**
        #   ### 📒 固件信息(${{ env.WRT_HAS_WIFI_TEXT }})
        #   - ${{ env.WRT_HAS_WIFI_TEXT }}带有线NSS的${{ env.VERSION_KERNEL }}内核固件
        #   - 💻 这是 ${{ env.DEVICE_SUBTARGET }} 平台使用的 OpenWrt ${{ env.WRT_HAS_LITE_TEXT }}固件
        #   - 💻 适配设备: ${{ env.DEVICE_PROFILE }}
        #   - 💻 设备架构：${{ env.DEVICE_ARCH }}
        #   - ⚽ 固件源码: ${{ env.WRT_REPO_URL }}
        #   - 💝 源码分支: ${{ env.WRT_REPO_BRANCH }}
        #   - 🌐 默认地址: ${{ env.WRT_DEFAULT_LANIP }}
        #   - 🔑 默认密码: 无 | password
        #   ### 🧊 固件版本
        #   - 固件内核：${{ env.VERSION_KERNEL }}
        #   - 固件编译前最后一次➦[主源码](${{ env.WRT_REPO_URL }})更新记录
        #   - ${{ env.VERSION_INFO }}
