#=================================================
# Description: Build OpenWrt using GitHub Actions
# Lisence: MIT
#=================================================

name:  CORE-ALL

on:
  workflow_call:
    inputs:
      # WRT_REPO_INFO:
      #   required: true
      #   type: string
      # WRT_REPO_URL:
      #   required: true
      #   type: string
      # WRT_REPO_BRANCH:
      #   required: true
      #   type: string
      WRT_SOURCE_HASH_INFO:
        required: true
        type: string
      WRT_CONFIG:
        required: true
        type: string
      WRT_DIY_SETTING:
        required: true
        type: string
        default: 'diy_config.sh'
      WRT_DIY_FEEDS:
        required: true
        type: string
        default: diy_feeds.sh
      WRT_GENERAL_CONFIG:
        required: true
        type: string
      WRT_DIYPackages:
        required: true
        type: string
      WRT_RELEASE_FIRMWARE:
        required: true
        type: boolean
      WRT_DEFAULT_LANIP:
        required: true
        type: string
      WRT_MINE_SAY:
        required: true
        type: string
      WRT_TOKEN_DINGDING:
        required: false
        type: string
      WRT_USE_APK:
        required: false
        type: boolean
    secrets:
      DINGDING_TOKEN: 
        required: false
      # UPLOAD_FIRMWARE_DIR:
      #   required: false
      #   type: boolean
      #   default: true
        
#环境变量配置
env:
  GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
  DINGDING_TOKEN: ${{ secrets.DINGDING_TOKEN }}
  WRT_REPO_INFO: ''
  WRT_REPO_URL: ${{ inputs.WRT_REPO_URL }}
  WRT_REPO_BRANCH: ${{ inputs.WRT_REPO_BRANCH }}
  WRT_SOURCE_HASH_INFO: ${{inputs.WRT_SOURCE_HASH_INFO}}
  WRT_REPO_Commit_Hash: ${{inputs.WRT_REPO_Commit_Hash}}
  WRT_CONFIG: ${{inputs.WRT_CONFIG}}                          # 配置文件
  WRT_DIY_SETTING: ${{ inputs.WRT_DIY_SETTING }}              # 自定义配置
  WRT_DIY_FEEDS: ${{ inputs.WRT_DIY_FEEDS || 'diy_feeds.sh' }} # 主要用于更新Feeds
  WRT_GENERAL_CONFIG: ${{ inputs.WRT_GENERAL_CONFIG }}        # 通用配置
  WRT_DIYPackages: ${{inputs.WRT_DIYPackages}}                # 自定义包配置
  WRT_RELEASE_FIRMWARE: ${{inputs.WRT_RELEASE_FIRMWARE}}      # 发布固件
  WRT_DEFAULT_LANIP: ${{inputs.WRT_DEFAULT_LANIP}}            # 默认lanIP
  WRT_MINE_SAY: ${{inputs.WRT_MINE_SAY}} 
  WRT_DIR_CONFIGS: Config                                     # 自定义配置文件夹
  WRT_DIR_SCRIPTS: Scripts                                    # 脚本文件夹
  WRT_diy_after_defconfig: 'diy_after_defconfig.sh'
  WRT_THEME_NAME: 'argon'
  UPLOAD_FIRMWARE_DIR: true
  IS_RESET_PASSWORD: true                                     # 是否把密码重置为空
  UPLOAD_ALL_BIN_DIR: false                                   # 是否上传编译后的bin目录，因整理编译后的文件设置了UPLOAD_FIRMWARE_DIR，所以不上传整个bin目录
  IS_RESIZE_SPACE: true                                      # 是否扩容空间，一般编译内容不多，可以不扩容，减少资源浪费
  FREE_UP_DISK: true                                          # 是否清理磁盘
  CACHE_TOOLCHAIN: true
  CLASH_KERNEL: amd64
  UPLOAD_BIN_DIR_FORCE: true                                 # 强制上传bin
  WRT_HAS_WIFI: true
  UPLOAD_ALL_BIN_DIR_WSS: false
  WRT_USE_APK: ${{inputs.WRT_USE_APK || false }}
  OPENWRT_PATH: './openwrt'
  DEVICE_TARGET: ''
  DEVICE_SUBTARGET: ''
  DEVICE_PROFILE: ''
  DEVICE_NAME_LIST: ''
  DEVICE_NAME_LIST_LIAN: ''
  DEVICE_ARCH: ''
  REPO_GIT_HASH: ''
  REPO_GIT_hash_simple: ''
  system_content_note: ''
  system_content: ''
  readme_desc_file: ''
  release_desc_file: ''
  WRT_IS_LEAN: true
  
#CI权限
permissions: write-all

jobs:
  build:
    runs-on: ubuntu-22.04
    if: github.event.repository.owner.id == github.event.sender.id
    steps:

    - name: Check Server Performance (检查服务器性能)
      run: |
        echo "警告⚠"
        echo "分配的服务器性能有限，若选择的插件过多，务必注意CPU性能！"
        echo -e "已知CPU型号（降序）：7763，8370C，8272CL，8171M，E5-2673 \n"
        echo "--------------------------CPU信息--------------------------"
        echo "CPU物理数量：$(cat /proc/cpuinfo | grep "physical id" | sort | uniq | wc -l)"
        echo -e "CPU核心信息：$(cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c) \n"
        echo "--------------------------内存信息--------------------------"
        echo "已安装内存详细信息："
        echo -e "$(sudo lshw -short -C memory | grep GiB) \n"
        echo "--------------------------硬盘信息--------------------------"
        echo "硬盘数量：$(ls /dev/sd* | grep -v [1-9] | wc -l)" && df -hT

    - name: Free Disk Space (清理磁盘)
      if: env.FREE_UP_DISK == true || env.FREE_UP_DISK == 'true'
      uses: FirelightFlagboy/gh-runner-free-disk-space@main
      with:
        android: true
        dotnet: true
        haskell: true
        docker-images: true
        large-packages: true
        swap-storage: true
        tool-cache: true
        
    - name: Check Disk (磁盘信息)
      run: |
        df -hT $GITHUB_WORKSPACE

    - name: Initialization Environment (初始化环境)
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        sudo -E apt -yqq update
        sudo -E apt -yqq full-upgrade
        sudo -E apt -yqq autoremove --purge
        sudo -E apt -yqq autoclean
        sudo -E apt -yqq clean
        sudo -E apt -yqq install dos2unix libfuse-dev
        sudo bash -c 'bash <(curl -sL https://build-scripts.immortalwrt.org/init_build_environment.sh)'
        sudo -E systemctl daemon-reload
        sudo -E timedatectl set-timezone "Asia/Shanghai"

    # - name: Initialization Environment (初始化环境)
    #   env:
    #     DEBIAN_FRONTEND: noninteractive
    #   run: |
    #     docker rmi $(docker images -q)
    #     sudo rm -rf /usr/share/dotnet /etc/apt/sources.list.d /usr/local/lib/android $AGENT_TOOLSDIRECTORY
    #     sudo -E apt-get -y purge azure-cli ghc* zulu* llvm* firefox google* dotnet* powershell openjdk* mongodb* moby* || true
    #     sudo -E apt-get -y update
    #     sudo -E apt -yqq install dos2unix libfuse-dev
    #     sudo -E apt-get -y install $(curl -fsSL is.gd/depends_ubuntu_2204)
    #     sudo -E systemctl daemon-reload
    #     sudo -E apt-get -y autoremove --purge
    #     sudo -E apt-get -y clean
    #     sudo timedatectl set-timezone 'Asia/Shanghai'

    - name: Check Config Values (检查配置变量)
      run: |
        WRT_HAS_WIFI=true
        [[ "$WRT_CONFIG" =~ NOWIFI|WIFINO|NO-WIFI|WIFI-NO ]] && { WRT_HAS_WIFI=false; }
        echo "WRT_HAS_WIFI=$WRT_HAS_WIFI" >> $GITHUB_ENV

        WRT_HAS_LITE=false
        [[ "${WRT_CONFIG,,}" =~ lite ]] && { WRT_HAS_LITE=true; }
        echo "WRT_HAS_LITE=$WRT_HAS_LITE" >> $GITHUB_ENV

        if [ -n "${{inputs.WRT_TOKEN_DINGDING}}" ]; then
            echo "DINGDING_TOKEN=${{inputs.WRT_TOKEN_DINGDING}}" >> $GITHUB_ENV
            echo "【Lin】配置TOKEN_DINGDING：${{inputs.WRT_TOKEN_DINGDING}}"
        fi

        echo "【Lin】读取文件名配置：$(if [ "$WRT_HAS_WIFI" == 'true' ]; then echo '有WIFI'; else echo '无WIFI'; fi)"
        echo "【Lin】读取文件名配置：$(if [ "$WRT_HAS_LITE" == 'true' ]; then echo '[精简版]'; else echo '[常规版]'; fi)"
        echo "【Lin】编译说明内容：${{ env.WRT_MINE_SAY != '' && env.WRT_MINE_SAY || '无' }}"
        if [ -n "${{ env.WRT_MINE_SAY }}" ]; then
            echo "${{ env.WRT_MINE_SAY }}"
        fi

        echo "【Lin】读取配置名：${{env.WRT_CONFIG}}"
        WRT_CONFIG_TMP="${{env.WRT_CONFIG}}"
        IFS='-' read -r INPUT_PLATFORM INPUT_WIFI INPUT_SOURCE_TYPE <<< "${WRT_CONFIG_TMP%.txt}"
        echo "INPUT_PLATFORM=$INPUT_PLATFORM" >> $GITHUB_ENV
        echo "【Lin】配置名读取平台：${INPUT_PLATFORM}"
        WRT_HAS_WIFI=true
        [[ "$INPUT_WIFI" =~ NOWIFI|WIFINO|NO-WIFI|WIFI-NO ]] && { WRT_HAS_WIFI=false; }
        echo "WRT_HAS_WIFI=$WRT_HAS_WIFI" >> $GITHUB_ENV
        echo "【Lin】配置名读取WIFI：${{env.WRT_HAS_WIFI}}"
        if [[ "${INPUT_SOURCE_TYPE}" == "V" ]]; then
          WRT_REPO_INFO='https://github.com/VIKINGYFY/immortalwrt|main'
        else
          WRT_REPO_INFO='https://github.com/coolsnowwolf/lede|master'
        fi
        echo "【Lin】配置名读取源码信息：${WRT_REPO_INFO}"

        # 判断是否有Hash
        if [ -n "${{ env.WRT_SOURCE_HASH_INFO }}" ]; then
          IFS='|' read -r WRT_SOURCE_HASH WRT_SOURCE_URL WRT_SOURCE_BRANCH <<< "${{ env.WRT_SOURCE_HASH_INFO }}"
          WRT_REPO_Commit_Hash="${WRT_SOURCE_HASH}"
          echo "WRT_REPO_Commit_Hash=$WRT_SOURCE_HASH" >> $GITHUB_ENV
          echo "【Lin】源码HASH值：${WRT_SOURCE_HASH}"
          if [ -n "${WRT_SOURCE_URL}" ]; then
            WRT_REPO_INFO="${WRT_SOURCE_URL}|${WRT_SOURCE_BRANCH}"
            echo "【Lin】源码HASH值读取源码信息：${WRT_REPO_INFO}"
          fi
        fi
        echo "WRT_REPO_INFO=$WRT_REPO_INFO" >> $GITHUB_ENV

        IFS='|' read -r WRT_REPO_URL WRT_REPO_BRANCH <<< "${WRT_REPO_INFO}"
        WRT_REPO_URL="${WRT_REPO_URL}"
        WRT_REPO_BRANCH="${WRT_REPO_BRANCH}"
        echo "WRT_REPO_URL=${WRT_REPO_URL}" >> $GITHUB_ENV
        echo "WRT_REPO_BRANCH=${WRT_REPO_BRANCH}" >> $GITHUB_ENV
        echo "【Lin】源码信息：[${WRT_REPO_BRANCH}] ${WRT_REPO_URL}"

    - name: Combine Disks (合并磁盘)
      uses: easimon/maximize-build-space@master
      if: env.IS_RESIZE_SPACE == true || env.IS_RESIZE_SPACE == 'true' || env.WRT_HAS_WIFI == 'true'
      with:
        swap-size-mb: 1024
        temp-reserve-mb: 100
        root-reserve-mb: 1024

    - name: Check Disk (磁盘信息)
      run: |
        df -hT $GITHUB_WORKSPACE

    - name: Checkout (下载当前源码)
      uses: actions/checkout@master

    - name: Check Values (设置编译变量)
      run: |
        START_DATE=$(date +"D%y%m%d")
        START_TIME=$(date +"D%y%m%d_T%H%M%S")
        echo "START_DATE=$START_DATE" >> $GITHUB_ENV
        echo "START_TIME=$START_TIME" >> $GITHUB_ENV
        echo "【Lin】编译日期：$START_DATE；编译时间：$START_TIME；"

    - name: config git (修改git下载缓冲大小)
      run: |
        git config --global http.postBuffer 524288000
        git config --global http.lowSpeedLimit 0
        git config --global http.lowSpeedTime 999999
        git config --global advice.detachedHead false

    - name: Clone Source Code (克隆源代码)
      id: clone_source
      run: |
        if [[ "${WRT_REPO_URL}" == *"immortalwrt"* ]]; then
          WRT_IS_LEAN=false
          echo "WRT_IS_LEAN=false" >> $GITHUB_ENV
        else
          WRT_IS_LEAN=true
          echo "WRT_IS_LEAN=true" >> $GITHUB_ENV
        fi
        echo "【Lin】克隆源代码：【$WRT_REPO_BRANCH】$WRT_REPO_URL"
        git clone --depth=1 --single-branch --branch $WRT_REPO_BRANCH $WRT_REPO_URL openwrt
        if [ ! -d ./openwrt ]; then
          change_branceh=''
          if [ "$WRT_REPO_URL" == 'master' ]; then
            change_branceh='main'
          elif [ "$WRT_REPO_URL" == 'main' ]; then
            change_branceh='master'
          fi
          echo "【Lin】修改克隆源代码：【$change_branceh】$WRT_REPO_URL"
          if [ -n "${change_branceh}" ]; then
            git clone --depth=1 --single-branch --branch $change_branceh $WRT_REPO_URL openwrt
          fi
        fi
        cd openwrt
        echo "OPENWRT_PATH=$PWD" >> $GITHUB_ENV
        if [ -n "${{ env.WRT_REPO_Commit_Hash }}" ]; then
          echo "【Lin】GIT检出到指定版本：${{ env.WRT_REPO_Commit_Hash }}"
          git fetch --depth=1 origin ${{ env.WRT_REPO_Commit_Hash }}
          git checkout ${{ env.WRT_REPO_Commit_Hash }}
        fi
        REPO_GIT_HASH=$(git log -1 --pretty=format:'%H')
        REPO_GIT_hash_simple=$(git log -1 --pretty=format:'%h')
        echo "REPO_GIT_HASH=$REPO_GIT_HASH" >> $GITHUB_ENV
        echo "REPO_GIT_hash_simple=$REPO_GIT_hash_simple" >> $GITHUB_ENV
        echo "【Lin】GIT HASH：${REPO_GIT_HASH}，hash: ${REPO_GIT_hash_simple}"
        VERSION_INFO=$(git show -s --date=short --format="作者: %an<br/>时间: %cd<br/>内容: %s<br/>hash: %H")
        echo "VERSION_INFO=$VERSION_INFO" >> $GITHUB_ENV
        # 临时导入config，为了获取设备信息
        [ -f ./.config ] && rm -rf ./.config
        cat $GITHUB_WORKSPACE/$WRT_DIR_CONFIGS/$WRT_GENERAL_CONFIG $GITHUB_WORKSPACE/$WRT_DIR_CONFIGS/$WRT_CONFIG >> .config

    # - name: ln mnt (合并磁盘mnt)
    #   if: env.IS_RESIZE_SPACE == true || env.IS_RESIZE_SPACE == 'true'
    #   run: |
    #     sudo mkdir -p /mnt/build_wrt
    #     sudo chown $USER:$USER /mnt/build_wrt
    #     sudo ln -s /mnt/build_wrt $GITHUB_WORKSPACE/openwrt

    - name: Check Scripts (搜索脚本并配置权限)
      working-directory: ${{ env.OPENWRT_PATH }}
      run: |
        echo "【Lin】配置脚本执行权限..."
        find ./ -maxdepth 3 -type f -iregex ".*\(txt\|sh\)$" -exec dos2unix {} \; -exec chmod +x {} \;

    - name: Read Variables (读取变量)
      working-directory: ${{ env.OPENWRT_PATH }}
      run: |
        the_repo=${WRT_REPO_URL%/}
        WRT_VER="${the_repo##*/}"-$WRT_REPO_BRANCH
        echo "WRT_VER=$WRT_VER" >> $GITHUB_ENV
        SOURCE_REPO="$(echo $WRT_REPO_URL | awk -F '/' '{print $(NF)}')"
        echo "SOURCE_REPO=$SOURCE_REPO" >> $GITHUB_ENV
        path_config_file="$OPENWRT_PATH/.config"
        device_name_list=()
        while IFS= read -r line
        do
          if [[ $line =~ ^(CONFIG_TARGET_DEVICE_|CONFIG_TARGET_)([^_]+)_([^_]+)_DEVICE_([^=]+)=y$ ]]; then
            prefix=${BASH_REMATCH[1]} 
            platform=${BASH_REMATCH[2]}
            subplatform=${BASH_REMATCH[3]}
            deviceName=${BASH_REMATCH[4]}
            device_name_list+=("$deviceName")
            DEVICE_TARGET=$platform
            DEVICE_SUBTARGET=$subplatform
          fi
        done < "$path_config_file"
        DEVICE_PROFILE=$(IFS=$'、'; echo "${device_name_list[*]}")
        DEVICE_NAME_LIST=$(IFS=$' '; echo "${device_name_list[*]}")
        DEVICE_NAME_LIST_LIAN=$(IFS=$'_and_'; echo "${device_name_list[*]}")
        echo "DEVICE_TARGET=$DEVICE_TARGET" >> $GITHUB_ENV
        echo "DEVICE_SUBTARGET=$DEVICE_SUBTARGET" >> $GITHUB_ENV
        echo "DEVICE_PROFILE=$DEVICE_PROFILE" >> $GITHUB_ENV
        echo "DEVICE_NAME_LIST=$DEVICE_NAME_LIST" >> $GITHUB_ENV
        echo "DEVICE_NAME_LIST_LIAN=$DEVICE_NAME_LIST_LIAN" >> $GITHUB_ENV
        dir_linux_version="$OPENWRT_PATH/target/linux/"
        dir_linux_device_target=$(find "$dir_linux_version" -type d -name "$DEVICE_TARGET" -print -prune)
        KERNEL_PATCHVER=''
        MAKEFILE_PATH="$dir_linux_device_target/Makefile"
        if [ -f "$MAKEFILE_PATH" ]; then
          KERNEL_PATCHVER=$(grep -E "KERNEL_PATCHVER[:=]+" $MAKEFILE_PATH | awk -F ':=' '{print $2}' | tr -d ' ')
        else
          echo "【Lin】文件不存在：$MAKEFILE_PATH"
        fi
        if [ -n "$KERNEL_PATCHVER" ]; then
          echo "【Lin】主版本KERNEL_PATCHVER：$KERNEL_PATCHVER"
          echo "VERSION_KERNEL=$KERNEL_PATCHVER" >> $GITHUB_ENV
        else
          echo "【Lin】主版本KERNEL_PATCHVER为空，取6.1"
          KERNEL_PATCHVER=6.1
        fi
        kernel_file_detail="$OPENWRT_PATH/target/linux/generic/kernel-$KERNEL_PATCHVER"
        if [ "${{ env.WRT_IS_LEAN }}" == 'true' ]; then
          kernel_file_detail="$OPENWRT_PATH/include/kernel-$KERNEL_PATCHVER"
        fi
        if [ -f "$kernel_file_detail" ]; then
          VERSION_KERNEL=$(grep -oP 'LINUX_KERNEL_HASH-\K[0-9]+\.[0-9]+\.[0-9]+' "$kernel_file_detail")
          echo "VERSION_KERNEL=$VERSION_KERNEL" >> $GITHUB_ENV
          echo "【Lin】内核版本：$VERSION_KERNEL"
        else
          echo "【Lin】文件不存在：$kernel_file_detail"
        fi
        echo "【Lin】编译DEVICE：${DEVICE_TARGET}-${DEVICE_SUBTARGET}-${DEVICE_PROFILE}"

    - name: Check Caches
      id: check-cache
      if: env.CACHE_TOOLCHAIN == 'true'
      uses: actions/cache@main
      with:
        key: ${{ env.DEVICE_SUBTARGET }}-${{ env.WRT_VER }}-${{ env.REPO_GIT_hash_simple }}
        restore-keys: ${{ env.DEVICE_SUBTARGET }}-${{ env.WRT_VER }}
        path: |
          ${{ env.OPENWRT_PATH }}/.ccache
          ${{ env.OPENWRT_PATH }}/staging_dir/host*
          ${{ env.OPENWRT_PATH }}/staging_dir/tool*

    - name: Update Caches
      if: env.CACHE_TOOLCHAIN == 'true'
      run: |
        if [ -d "${{ env.OPENWRT_PATH }}/staging_dir" ]; then
          find "${{ env.OPENWRT_PATH }}/staging_dir" -type d -name "stamp" -not -path "*target*" | while read -r DIR; do
            find "$DIR" -type f -exec touch {} +
          done
          mkdir -p ${{ env.OPENWRT_PATH }}/tmp && echo "1" > ${{ env.OPENWRT_PATH }}/tmp/.build
          echo "【Lin】toolchain skiped done!"
        else
          echo "【Lin】caches missed!"
        fi
        if ${{steps.check-cache.outputs.cache-hit != 'true'}}; then
          the_cache_key="${{ env.DEVICE_SUBTARGET }}-${{ env.WRT_VER }}"
          CACHE_LIST_ALL=$(gh cache list --key "$the_cache_key")
          echo "【Lin】CACHE_LIST_ALL：${CACHE_LIST_ALL[@]}"   
          CACHE_LIST=$(gh cache list --key "$the_cache_key" | cut -f 1)
          for CACHE_KEY in $CACHE_LIST; do
            gh cache delete $CACHE_KEY
            echo "【Lin】caches cleanup done：$CACHE_KEY"
          done
          echo "【Lin】caches cleanup done：${CACHE_LIST[@]}"
        fi
        
    - name: diy Feeds (自定义feeds)
      working-directory: ${{ env.OPENWRT_PATH }}
      run: |
        bash $GITHUB_WORKSPACE/$WRT_DIR_SCRIPTS/$WRT_DIY_FEEDS
        echo "【Lin】feeds内容：$(cat ./feeds.conf.default)"

    - name: Update Feeds (更新并安装feeds)
      working-directory: ${{ env.OPENWRT_PATH }}
      run: |
        ./scripts/feeds update -a
        ./scripts/feeds install -a

    - name: diy Packages (自定义包)
      working-directory: ${{ env.OPENWRT_PATH }}
      run: |
        cd ./package
        echo "【Lin】执行DIY包脚本：$GITHUB_WORKSPACE/$WRT_DIR_SCRIPTS/$WRT_DIYPackages"
        bash "$GITHUB_WORKSPACE/$WRT_DIR_SCRIPTS/$WRT_DIYPackages"

    - name: diy config (自定义配置)
      working-directory: ${{ env.OPENWRT_PATH }}
      run: |
        echo '【Lin】移除所有.config并添加新的.config'
        [ -f ./.config ] && rm -rf ./.config
        cat $GITHUB_WORKSPACE/$WRT_DIR_CONFIGS/$WRT_GENERAL_CONFIG $GITHUB_WORKSPACE/$WRT_DIR_CONFIGS/$WRT_CONFIG >> .config
        
    - name: diy settings (加载自定义设置) 
      working-directory: ${{ env.OPENWRT_PATH }}
      run: |
        cp $GITHUB_WORKSPACE/$WRT_DIR_SCRIPTS/patch/custom_usage.txt $OPENWRT_PATH/custom_usage.txt
        if [ -e "$GITHUB_WORKSPACE/$WRT_DIR_SCRIPTS/$WRT_DIY_SETTING" ]; then
          echo "【Lin】加载自定义配置成功：$GITHUB_WORKSPACE/$WRT_DIR_SCRIPTS/$WRT_DIY_SETTING"
          bash "$GITHUB_WORKSPACE/$WRT_DIR_SCRIPTS/$WRT_DIY_SETTING" -n "Linjw" -i "${{env.WRT_DEFAULT_LANIP}}" -p "${{env.IS_RESET_PASSWORD}}" -t "${{env.WRT_THEME_NAME}}" -m "${{ env.WRT_USE_APK == 'true' && 'apk' || 'ipk' }}"
        else
          echo "【Lin】未找到DIY设置：$GITHUB_WORKSPACE/$WRT_DIR_SCRIPTS/$WRT_DIY_SETTING"
        fi
        cp -f .config my_config.txt

    - name: defconfig (确认配置)
      working-directory: ${{ env.OPENWRT_PATH }}
      run: |
        make defconfig > /dev/null 2>&1
        ./scripts/diffconfig.sh > seed.config
        # 从配置文件中获取架构, 一般是defconfig后获取
        DEVICE_ARCH=$(grep -oP '^CONFIG_TARGET_ARCH_PACKAGES="\K[^"]*' $OPENWRT_PATH/.config)
        echo "DEVICE_ARCH=$DEVICE_ARCH" >> $GITHUB_ENV
        echo "【Lin】make defconfig后配置文件为："
        echo "$(cat seed.config)"

    - name: DIY after defconfig (确认config后执行脚本)
      working-directory: ${{ env.OPENWRT_PATH }}
      run: |
        file_diy="$GITHUB_WORKSPACE/$WRT_DIR_SCRIPTS/diy_after_defconfig.sh"
        [ -f "${file_diy}" ] && chmod +x "${file_diy}" && bash "${file_diy}"

    - name: Read Variables (读取变量)
      working-directory: ${{ env.OPENWRT_PATH }}
      run: |
        # 从配置文件中获取架构, 一般是defconfig后获取
        DEVICE_ARCH=$(grep -oP '^CONFIG_TARGET_ARCH_PACKAGES="\K[^"]*' "$OPENWRT_PATH/.config")
        echo "DEVICE_ARCH=$DEVICE_ARCH" >> $GITHUB_ENV
        echo "【Lin】编译DEVICE架构：${DEVICE_ARCH}"
        # LUCI_VERSION=$(grep -oP '^[^#]*luci' "${OPENWRT_PATH}/feeds.conf.default" | grep -oP 'openwrt-\K[^;]*')
        LUCI_VERSION=$(sed -n 's/^[^#]*luci.*openwrt-\([^;[:space:]]*\).*/\1/p' "${OPENWRT_PATH}/feeds.conf.default")
        echo "LUCI_VERSION=$LUCI_VERSION" >> $GITHUB_ENV
        echo "【Lin】编译LUCI版本信息：${LUCI_VERSION}"
        config_version=$(grep CONFIG_VERSION_NUMBER "${OPENWRT_PATH}/.config" | cut -d '=' -f 2 | tr -d '"' | awk '{print $2}')
        # include_version=$(grep -oP '^VERSION_NUMBER:=.*,\s*\K[0-9]+\.[0-9]+\.[0-9]+(-*)?' "${OPENWRT_PATH}/include/version.mk" | tail -n 1 | sed -E 's/([0-9]+\.[0-9]+)\..*/\1/')
        include_version=$(sed -nE 's/^VERSION_NUMBER:=.*,[[:space:]]*([0-9]+\.[0-9]+\.[0-9]+(-[^)]*)?).*/\1/p' "${OPENWRT_PATH}/include/version.mk" | tail -n 1)
        OP_VERSION="${config_version:-${include_version}}"
        echo "OP_VERSION=$OP_VERSION" >> $GITHUB_ENV
        echo "【Lin】编译openwrt版本信息：${OP_VERSION}"

    - name: Check Config (缓存配置文件)
      working-directory: ${{ env.OPENWRT_PATH }}
      run: |
        name_config_file="Config_${{ env.DEVICE_SUBTARGET }}_${{ env.DEVICE_NAME_LIST_LIAN }}_${{ env.WRT_VER }}_${{ env.START_TIME }}"
        echo "name_config_file=$name_config_file" >> $GITHUB_ENV
        echo "【Lin】配置文件名为：$name_config_file"
        mkdir -p ./config_mine
        cp -f ./my_config.txt ./config_mine/${name_config_file}_mine.txt
        cp -f ./.config ./config_mine/"$name_config_file"_full.txt
        awk '!/^#/ && !/^$/' ./.config > ./config_mine/"$name_config_file".txt
        cp -f ./seed.config ./config_mine/"$name_config_file".seed.txt
        system_content="支持设备：${{ env.DEVICE_PROFILE }}\n\
        固件类型：${{ env.WRT_HAS_LITE == 'true' && '[精简版]' || '[常规版]' }}\n\
        支持平台：${{ env.DEVICE_TARGET }}-${{ env.DEVICE_SUBTARGET }}\n\
        设备架构：${{ env.DEVICE_ARCH }}\n\
        内核版本：${{ env.VERSION_KERNEL }}\n\
        LUCI版本：${{ env.LUCI_VERSION || '未知' }}\n\
        OP版本：${{ env.OP_VERSION }}\n\
        包管理器：${{ env.WRT_USE_APK == 'true' && 'apk' || 'ipkg' }}\n\
        默认地址：${{ env.WRT_DEFAULT_LANIP }}\n\
        默认密码：无 | password\n\
        是否wifi：${{ env.WRT_HAS_WIFI == 'true' && '有WIFI' || '无WIFI' }}\n\
        源码地址：${{ env.WRT_REPO_URL }}\n\
        源码分支：${{ env.WRT_REPO_BRANCH }}\n\
        源码hash：${{ env.REPO_GIT_HASH }}"
        echo "system_content=$system_content" >> $GITHUB_ENV
        echo -e "【Lin】\n$system_content"
        readme_script="$GITHUB_WORKSPACE/$WRT_DIR_SCRIPTS/readme.sh"
        [ -f "$readme_script" ] && chmod +x "$readme_script"
        TO_MY_SAY_DETAIL_tmp="${system_content}\n\
        编译开始：${{ env.START_TIME }}"
        TO_MY_SAY_DETAIL=$(echo -e $TO_MY_SAY_DETAIL_tmp)
        [ -f "$readme_script" ] && bash "$readme_script" -c "./.config" -o "./config_mine/readme.txt" -s "$TO_MY_SAY_DETAIL" -a "${{ env.WRT_MINE_SAY }}" -r 'false'
        readme_desc_file="$OPENWRT_PATH/config_mine/readme.txt"
        echo "readme_desc_file=$readme_desc_file" >> $GITHUB_ENV
        # 把内容保存到环境变量system_content_note中
        echo 'system_content_note<<EOF' >> $GITHUB_ENV
        cat "${readme_desc_file}" >> $GITHUB_ENV
        echo 'EOF' >> $GITHUB_ENV
        echo 'system_content_note: ${{ env.system_content_note }}' > /dev/null 2>&1 # 读一下，防止下个步骤读不到
        sleep 1

    - name: Send dingding notify
      continue-on-error: true
      uses: zcong1993/actions-ding@master
      if: env.DINGDING_TOKEN != ''
      with:
        dingToken: ${{ env.DINGDING_TOKEN }}
        body: |
          {
            "msgtype": "text",
            "text": {
                "content": "编译开始：${{ env.START_TIME }}\n${{ env.system_content_note }}"
             }
          }
          
    - name: Upload Config (上传配置文件)
      id: config_upload
      timeout-minutes: 5
      continue-on-error: true
      uses: actions/upload-artifact@master
      with:
        name: config_${{ env.DEVICE_SUBTARGET }}_${{ env.DEVICE_NAME_LIST_LIAN }}_${{ env.START_TIME }}
        path: ${{ env.OPENWRT_PATH }}/config_mine

    # - name: Cache Toolchain (缓存工具链)
    #   if: env.CACHE_TOOLCHAIN == 'true'
    #   uses: HiGarfield/cachewrtbuild@main
    #   with:
    #     ccache: false
    #     mixkey: ${{ env.DEVICE_TARGET }}-${{ env.WRT_VER }}-${{ env.DEVICE_SUBTARGET }}
    #     prefix: ${{ env.OPENWRT_PATH }}

    - name: Download tools (下载工具包) 
      working-directory: ${{ env.OPENWRT_PATH }}
      run: |
        echo "【Lin】下载工具，DEVICE：${{ env.DEVICE_TARGET }}-${{ env.DEVICE_SUBTARGET }}-${{ env.DEVICE_PROFILE }}"
        make download -j$(nproc)
        # find dl -size -1024c -exec ls -l {} \;
        # find dl -size -1024c -exec rm -f {} \;
    
    - name: Check Disk (磁盘信息)
      run: |
        df -hT $GITHUB_WORKSPACE

    - name: 编译固件 Build firmware
      id: compile
      working-directory: ${{ env.OPENWRT_PATH }}
      run: |
        echo -e "$(nproc) thread build."
        # make -j$(nproc) V=s || make -j1 V=s
        make -j$(nproc) || make -j1 V=s
        echo "status=success" >> $GITHUB_OUTPUT
        echo "END_DATE=$(date +"D%y%m%d")" >> $GITHUB_ENV
        END_TIME=$(date +"D%y%m%d_T%H%M%S")
        echo "END_TIME=$END_TIME" >> $GITHUB_ENV
        echo "【Lin】${{ env.DEVICE_SUBTARGET }}-${{ env.DEVICE_PROFILE }}编译完成，完成时间：$END_TIME"

    - name: Machine Information
      continue-on-error: true
      working-directory: ${{ env.OPENWRT_PATH }}
      run: |
        echo "======================="
        lscpu | grep -E "name|Core|Thread"
        echo "======================="
        df -h
        echo "======================="
        du -h --max-depth=1
        echo "======================="
        
    # - name: Upload bin directory
    #   continue-on-error: true
    #   id: all_upload
    #   timeout-minutes: 25
    #   uses: actions/upload-artifact@master
    #   if: steps.compile.outputs.status == 'success' && (env.UPLOAD_ALL_BIN_DIR == true || env.UPLOAD_ALL_BIN_DIR == 'true')
    #   with:
    #     name: bin_${{ env.DEVICE_SUBTARGET }}_${{ env.DEVICE_NAME_LIST_LIAN }}_${{ env.START_TIME }}
    #     path: ${{ env.OPENWRT_PATH }}/bin
        
    - name: Upload all bin datas to wss
      id: all_upload_wss
      timeout-minutes: 25
      continue-on-error: true
      if: steps.compile.outputs.status == 'success' && env.UPLOAD_ALL_BIN_DIR_WSS == 'true'
      run: |
        curl -fsSL git.io/file-transfer | sh
        ./transfer wss -s -p 16 --no-progress "${{ env.OPENWRT_PATH }}/bin/" 2>&1 | tee wss_all.log
        bin_download_url_all=$(cat wss_all.log | grep "Download Link: " | cut -f3 -d" ")
        echo "下载地址：$bin_download_url_all"
        echo "bin_download_url_all=${bin_download_url_all}" >> $GITHUB_OUTPUT
        echo "bin_download_url_all=${bin_download_url_all}" >> $GITHUB_ENV

    - name: Organize Files(整理编译后的文件)
      id: organize
      if: steps.compile.outputs.status == 'success'
      working-directory: ${{ env.OPENWRT_PATH }}
      run: |
        mkdir -p ./upload ./upload/packages ./upload/configs
        # 重新配置readme.txt(加入编译完成时间)
        rm -fr "./config_mine/readme.txt"
        readme_script="$GITHUB_WORKSPACE/$WRT_DIR_SCRIPTS/readme.sh"
        [ -f "$readme_script" ] && chmod +x "$readme_script"
        TO_MY_SAY_DETAIL_tmp="${{ env.system_content }}\n\
        编译开始：${{ env.START_TIME }}\n\
        编译完成：${{ env.END_TIME }}"
        TO_MY_SAY_DETAIL=$(echo -e $TO_MY_SAY_DETAIL_tmp)
        [ -f "$readme_script" ] && bash "$readme_script" -c "./.config" -o "./config_mine/readme.txt" -s "$TO_MY_SAY_DETAIL" -a "${{ env.WRT_MINE_SAY }}" -r 'false'
        [ -f "$readme_script" ] && bash "$readme_script" -c "./.config" -o "./readme_release.txt" -s "$TO_MY_SAY_DETAIL" -a "${{ env.WRT_MINE_SAY }}" -r 'true'
        readme_desc_file="$OPENWRT_PATH/config_mine/readme.txt"
        echo "readme_desc_file=${readme_desc_file}" >> $GITHUB_ENV
        release_desc_file="$OPENWRT_PATH/readme_release.txt"
        echo "release_desc_file=${release_desc_file}" >> $GITHUB_ENV
        KVER=$(find ./bin/targets/ -type f -name "*.manifest" -exec grep -oP '^kernel - \K[\d\.]+' {} \;)
        echo "【Lin】编译完成获取内核版本：$KVER"
        # cp -f ./config_mine/* ./upload/configs/
        cp -f ./my_config.txt ./upload/config.txt
        cp -f ${readme_desc_file} ./upload/readme.txt
        echo "【Lin】复制配置文件config.txt"
        TMP_DIR=$(mktemp -d)
        find ./bin/packages/ -type f \( -name "*.ipk" -o -name "*.apk" \) -exec mv -f {} "$TMP_DIR" \;
        find ./bin/targets/ -type f \( -name "*.ipk" -o -name "*.apk" \) -exec mv -f {} "$TMP_DIR" \;
        find ./bin/targets/ -iregex ".*\(buildinfo\|json\|manifest\|sha256sums\|packages\)$" -exec rm -rf {} +
        find ./bin/targets/ -iregex ".*\(initramfs-uImage\).*" -exec rm -rf {} +
        bash $GITHUB_WORKSPACE/$WRT_DIR_SCRIPTS/Organize_Packages.sh "$TMP_DIR"
        tar -zcf ./upload/Packages.tar.gz -C "$TMP_DIR" --transform 's,^./,,' .
        rm -rf "$TMP_DIR"
        rm -rf ./upload/packages
        echo "【Lin】设备信息：${{ env.DEVICE_NAME_LIST }}"
        for TYPE in ${{ env.DEVICE_NAME_LIST }} ; do
          echo "【Lin】TYPE: $TYPE============================================"
          for FILE in $(find ./bin/targets/ -type f -iname "*$TYPE*.*") ; do
            EXT=$(basename $FILE | cut -d '.' -f 2-)
            NAME=$(basename $FILE | cut -d '.' -f 1 | grep -io "\($TYPE\).*")
            NEW_FILE="${{ env.DEVICE_SUBTARGET }}"_"$NAME"_"${{ env.WRT_VER }}"_"${{ env.START_TIME }}"."$EXT"
            echo "【Lin】文件：$FILE"
            echo "【Lin】改名后：$NEW_FILE"
            echo "【Lin】-----------------------------------------------------"
            mv -f $FILE ./upload/$NEW_FILE
          done
        done
        find ./bin/targets/ -type f -not -name '*openwrt-imagebuilder*' -exec mv -f {} ./upload/ \;
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Check Disk (查询磁盘信息)
      run: |
        df -hT $GITHUB_WORKSPACE

    - name: Upload bin to wss (上传固件到WSS)
      id: upload_wss
      continue-on-error: true
      timeout-minutes: 5
      if: steps.organize.outputs.status == 'success' && !cancelled()
      run: |
        curl -fsSL git.io/file-transfer | sh
        ./transfer wss --silent --no-progress "${{ env.OPENWRT_PATH }}/upload/" 2>&1 | tee upload_net.log
        bin_download_url=$(cat upload_net.log | grep "Download Link: " | cut -f3 -d" ")
        echo "下载地址：$bin_download_url"
        echo "bin_download_url=${bin_download_url}" >> $GITHUB_OUTPUT
        echo "bin_download_url=${bin_download_url}" >> $GITHUB_ENV
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Upload Firmware To Artifact(将固件上传到Artifact)
      id: upload_artifact
      timeout-minutes: 30
      continue-on-error: true
      if: steps.compile.outputs.status == 'success' && ((env.WRT_RELEASE_FIRMWARE != 'true' && env.UPLOAD_FIRMWARE_DIR == 'true') || env.UPLOAD_BIN_DIR_FORCE != 'true' || steps.upload_wss.outputs.status != 'success')
      uses: actions/upload-artifact@main
      with:
        name: ${{ env.DEVICE_SUBTARGET }}_${{ env.DEVICE_NAME_LIST_LIAN }}_${{ env.START_TIME }}_Firmware
        path: ${{ env.OPENWRT_PATH }}/upload

    - name: Create Notification Content (创建推送成功内容)
      id: notification_content
      continue-on-error: true
      run: |
        echo "【Lin】配置通知content"
        notify_content="\
        限时下载地址：${{env.bin_download_url}}\n\
        Artifact下载地址：https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}\n\n\
        ${{ env.system_content }}\n\
        编译开始：${{ env.START_TIME }}\n\
        编译完成：${{ env.END_TIME }}"
        echo "notify_content=${notify_content}" >> $GITHUB_ENV
        echo "notify_content=${notify_content}" >> $GITHUB_OUTPUT

    - name: Send dingding notify (推送编译成功消息)
      continue-on-error: true
      uses: zcong1993/actions-ding@master
      if: env.DINGDING_TOKEN != '' && (steps.upload_wss.outputs.bin_download_url != '' || env.UPLOAD_BIN_DIR_FORCE == 'true')
      with:
        dingToken: ${{ env.DINGDING_TOKEN }}
        body: |
          {
            "msgtype": "text",
            "text": {
                "content": "${{ env.notify_content }}"
             }
          }

    - name: Prepare Release Body (读取发布内容)
      run: |
        echo "【Lin】发布内容: ${{ env.release_desc_file }}"
        the_release_content=$(cat ${{ env.release_desc_file }})
        echo "${the_release_content}"

    - name: Upload Firmware To Release (发布固件)
      id: release
      if: steps.compile.outputs.status == 'success' && env.WRT_RELEASE_FIRMWARE == 'true'
      uses: softprops/action-gh-release@v2
      with:
        name: ${{ env.START_TIME }} for ${{ env.DEVICE_SUBTARGET }}
        tag_name: ${{ env.START_TIME }}_${{ env.DEVICE_SUBTARGET }}
        files: ${{ env.OPENWRT_PATH }}/upload/*.*
        body_path: ${{ env.release_desc_file }}
        # body: |
        #   **This is OpenWrt Firmware for ${{ env.DEVICE_PROFILE }}**
        #   ### 📒 固件信息(${{ env.WRT_HAS_WIFI_TEXT }})
        #   - ${{ env.WRT_HAS_WIFI_TEXT }}带有线NSS的${{ env.VERSION_KERNEL }}内核固件
        #   - 💻 这是 ${{ env.DEVICE_SUBTARGET }} 平台使用的 OpenWrt ${{ env.WRT_HAS_LITE_TEXT }}固件
        #   - 💻 适配设备: ${{ env.DEVICE_PROFILE }}
        #   - 💻 设备架构：${{ env.DEVICE_ARCH }}
        #   - ⚽ 固件源码: ${{ env.WRT_REPO_URL }}
        #   - 💝 源码分支: ${{ env.WRT_REPO_BRANCH }}
        #   - 🌐 默认地址: ${{ env.WRT_DEFAULT_LANIP }}
        #   - 🔑 默认密码: 无 | password
        #   ### 🧊 固件版本
        #   - 固件内核：${{ env.VERSION_KERNEL }}
        #   - 固件编译前最后一次➦[主源码](${{ env.WRT_REPO_URL }})更新记录
        #   - ${{ env.VERSION_INFO }}


