#=================================================
# Description: Build OpenWrt using GitHub Actions
# Lisence: MIT
#=================================================

name:  IPQ60XX-NOWIFI_test

on:
  #手动编译
  workflow_dispatch:
    inputs:
      iCONFIG_FILE:
        description: '配置文件：'
        required: true
        type: string
        default: 'IPQ60XX-NOWIFI.txt'
      iDIY_SETTING:
        description: 'DIY脚本：'
        required: false
        type: string
        default: 'IPQ60XX-NOWIFI.sh'
      iGENERAL_CONFIG:
        description: '通用配置文件'
        required: true
        default: 'GENERAL.txt'
        type: choice
        options:
          - 'GENERAL.txt'
          - 'GENERAL_custom.txt'
      iDIY_Packages:
        description: 'DIY包配置：'
        required: false
        type: string
        default: 'Packages.sh'
      iDEFAULT_LANIP:
        description: '配置LAN-IP'
        required: false
        type: string
        default: '192.168.0.1'
      iUPLOAD_FIRMWARE_DIR:
        description: '将固件上传到Artifact'
        required: false
        type: boolean
        default: true
      iFIRMWARE_RELEASE:
        description: '发布firmware'
        required: false
        type: boolean
        default: true
      iWHAT_MY_SAY:
        description: '编译说明'
        required: false
        type: string
        default: ''
      iIS_RESET_PASSWORD:
        description: '重置root密码'
        required: false
        type: boolean
        default: false
      iREPO_Commit_Hash:
        description: '历史版本HASH'
        required: false
        type: string
        default: ''

#环境变量配置
env:
  GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  REPO_Commit_Hash: ${{inputs.iREPO_Commit_Hash}}
  CONFIG_FILE: ${{inputs.iCONFIG_FILE}}                # 配置文件
  DIY_SETTING: ${{inputs.iDIY_SETTING}}                   # 自定义配置
  DIY_FEEDS: diy_feeds.sh                         # 主要用于更新Feeds
  GENERAL_CONFIG: ${{inputs.iGENERAL_CONFIG}}            # 通用配置
  DIYPackages: ${{inputs.iDIY_Packages}}                     # 自定义包配置
  CLASH_KERNEL: amd64
  CACHE_TOOLCHAIN: true
  FREE_UP_DISK: true
  UPLOAD_FIRMWARE_DIR: ${{inputs.iUPLOAD_FIRMWARE_DIR}}
  UPLOAD_BIN_DIR: false                           # 是否上传编译后的bin目录，因整理编译后的文件设置了UPLOAD_FIRMWARE_DIR，所以不上传整个bin目录
  FIRMWARE_RELEASE: ${{inputs.iFIRMWARE_RELEASE}} # 发布固件
  IS_RESET_PASSWORD: ${{inputs.iIS_RESET_PASSWORD}}  # 是否把密码重置为空
  IS_RESIZE_SPACE: false      # 是否扩容空间，一般编译内容不多，可以不扩容，减少资源浪费
  TZ: Asia/Shanghai
  CONFIGS_DIR: Config                             # 自定义配置文件夹
  SCRIPTS_DIR: Scripts                            # 脚本文件夹
  DEFAULT_LANIP: ${{inputs.iDEFAULT_LANIP}}             # 默认lanIP
  MINE_SAY: ${{inputs.iWHAT_MY_SAY}} 
  UPLOAD_COWTRANSFER: true
  
#CI权限
permissions: write-all

jobs:
  build:
    runs-on: ubuntu-22.04
    if: github.event.repository.owner.id == github.event.sender.id
    steps:

    - name: Check Server Performance (检查服务器性能)
      run: |
        echo "编译说明：${{ env.MINE_SAY }}"
        echo "警告⚠"
        echo "分配的服务器性能有限，若选择的插件过多，务必注意CPU性能！"
        echo -e "已知CPU型号（降序）：7763，8370C，8272CL，8171M，E5-2673 \n"
        echo "--------------------------CPU信息--------------------------"
        echo "CPU物理数量：$(cat /proc/cpuinfo | grep "physical id" | sort | uniq | wc -l)"
        echo -e "CPU核心信息：$(cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c) \n"
        echo "--------------------------内存信息--------------------------"
        echo "已安装内存详细信息："
        echo -e "$(sudo lshw -short -C memory | grep GiB) \n"
        echo "--------------------------硬盘信息--------------------------"
        echo "硬盘数量：$(ls /dev/sd* | grep -v [1-9] | wc -l)" && df -hT

    - name: Free Disk Space
      if: env.FREE_UP_DISK == true || env.FREE_UP_DISK == 'true'
      uses: endersonmenezes/free-disk-space@main
      with:
        remove_android: true
        remove_dotnet: true
        remove_haskell: true
        remove_tool_cache: true
        remove_swap: true
        remove_packages: "android* azure* clang* dotnet* firefox* ghc* golang* google* libclang* libgl1* lld* llvm* microsoft* mongodb* mono* mysql* nodejs* openjdk* php* postgresql* powershell* snap* temurin* yarn* zulu*"
        remove_packages_one_command: true
        remove_folders: "/etc/apt/sources.list.d* /etc/mono* /etc/mysql* /usr/include/linux/android* /usr/lib/llvm* /usr/lib/mono* /usr/local/lib/android* /usr/local/lib/node_modules* /usr/local/share/chromium* /usr/local/share/powershell* /usr/local/share/vcpkg/ports/azure* /usr/local/share/vcpkg/ports/google* /usr/local/share/vcpkg/ports/libpq/android* /usr/local/share/vcpkg/ports/llvm* /usr/local/share/vcpkg/ports/mysql* /usr/local/share/vcpkg/ports/snap* /usr/share/azure* /usr/share/dotnet* /usr/share/glade* /usr/share/miniconda* /usr/share/php* /usr/share/swift /var/lib/mysql* /var/log/azure*"
        testing: false

    - name: Initialization Environment (初始化环境)
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        docker rmi $(docker images -q)
        sudo rm -rf /usr/share/dotnet /etc/apt/sources.list.d /usr/local/lib/android $AGENT_TOOLSDIRECTORY
        sudo -E apt-get -y purge azure-cli ghc* zulu* llvm* firefox google* dotnet* powershell openjdk* mongodb* moby* || true
        sudo -E apt-get -y update
        sudo -E apt -yqq install dos2unix
        sudo -E apt-get -y install $(curl -fsSL is.gd/depends_ubuntu_2204)
        sudo -E systemctl daemon-reload
        sudo -E apt-get -y autoremove --purge
        sudo -E apt-get -y clean
        sudo timedatectl set-timezone "$TZ"

    - name: Combine Disks (合并磁盘)
      uses: easimon/maximize-build-space@master
      if: env.IS_RESIZE_SPACE == true || env.IS_RESIZE_SPACE == 'true'
      with:
        swap-size-mb: 1024
        temp-reserve-mb: 100
        root-reserve-mb: 1024

    - name: Checkout (下载当前源码)
      uses: actions/checkout@master

    - name: Check Scripts (搜索脚本并配置权限)
      run: |
        find ./ -maxdepth 3 -type f -iregex ".*\(txt\|sh\)$" -exec dos2unix {} \; -exec chmod +x {} \;

    - name: config git (修改git下载缓冲大小)
      run: |
        git config --global http.postBuffer 524288000
        git config --global http.lowSpeedLimit 0
        git config --global http.lowSpeedTime 999999

    - name: Clone Source Code (克隆源代码)
      run: |
        df -hT $GITHUB_WORKSPACE
        COMPILE_DATE=$(date +"%y%m%d")
        COMPILE_TIME=$(date +"%y%m%d%H%M%S")
        COMPILE_DATE_HOUR=$(date +"%y%m%d%H%M")
        echo "COMPILE_DATE=$COMPILE_DATE" >> $GITHUB_ENV
        echo "COMPILE_TIME=$COMPILE_TIME" >> $GITHUB_ENV
        echo "COMPILE_DATE_HOUR=$COMPILE_DATE_HOUR" >> $GITHUB_ENV
        echo "【LinInfo】编译日期：$COMPILE_DATE；编译时间：$COMPILE_TIME；编译时间(精确到分钟)：$COMPILE_DATE_HOUR"
        echo "【LinInfo】克隆源代码：【$REPO_BRANCH】$REPO_URL"
        git clone --depth=1 --single-branch --branch $REPO_BRANCH $REPO_URL openwrt
        cd openwrt
        if [ -n "${{ env.REPO_Commit_Hash }}" ]; then
          echo "【LinInfo】GIT检出到指定版本：${{ env.REPO_Commit_Hash }}"
          git fetch --depth=1 origin ${{ env.REPO_Commit_Hash }}
          git checkout ${{ env.REPO_Commit_Hash }}
        fi
        REPO_GIT_HASH=$(git log -1 --pretty=format:'%h')
        echo "【LinInfo】GIT HASH：${REPO_GIT_HASH}"
        echo "REPO_GIT_HASH=$REPO_GIT_HASH" >> $GITHUB_ENV
        VERSION_INFO=$(git show -s --date=short --format="作者: %an<br/>时间: %cd<br/>内容: %s<br/>hash: %H")
        echo "VERSION_INFO=$VERSION_INFO" >> $GITHUB_ENV
        bash $GITHUB_WORKSPACE/$SCRIPTS_DIR/$DIY_FEEDS
        echo "【LinInfo】feeds内容：$(cat ./feeds.conf.default)"
        echo "OPENWRT_PATH=$PWD" >> $GITHUB_ENV
        echo "编译说明内容：${{ env.MINE_SAY }}"

    - name: Upload firmware to WeTransfer
      id: wetransfer
      if: steps.organize.outputs.status == 'success' && env.UPLOAD_WETRANSFER == 'true' && !cancelled()
      run: |
        curl -fsSL git.io/file-transfer | sh
        ./transfer wet -s -p 16 --no-progress ${OPENWRT_PATH} 2>&1 | tee wetransfer.log
        echo "::warning file=wetransfer.com::$(cat wetransfer.log | grep https)"
        echo "::set-output name=url::$(cat wetransfer.log | grep https | cut -f3 -d" ")"
