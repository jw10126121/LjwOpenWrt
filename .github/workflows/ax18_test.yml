#=================================================
# Description: Build OpenWrt using GitHub Actions
# Lisence: MIT
#=================================================

name:  IPQ60XX-NOWIFI_test

on:
  #手动编译
  workflow_dispatch:
    inputs:
      iCONFIG_FILE:
        description: '配置文件：'
        required: true
        type: string
        default: 'IPQ60XX-NOWIFI.txt'
      iDIY_SETTING:
        description: 'DIY脚本：'
        required: false
        type: string
        default: 'IPQ60XX-NOWIFI.sh'
      iGENERAL_CONFIG:
        description: '通用配置文件'
        required: true
        default: 'GENERAL.txt'
        type: choice
        options:
          - 'GENERAL.txt'
          - 'GENERAL_custom.txt'
      iDIY_Packages:
        description: 'DIY包配置：'
        required: false
        type: string
        default: 'Packages.sh'
      iDEFAULT_LANIP:
        description: '配置LAN-IP'
        required: false
        type: string
        default: '192.168.0.1'
      iUPLOAD_FIRMWARE_DIR:
        description: '将固件上传到Artifact'
        required: false
        type: boolean
        default: true
      iFIRMWARE_RELEASE:
        description: '发布firmware'
        required: false
        type: boolean
        default: true
      iWHAT_MY_SAY:
        description: '编译说明'
        required: false
        type: string
        default: ''
      iTOKEN_DINGDING:
        description: '钉钉TOKEN'
        required: false
        type: string
        default: ''
      iREPO_Commit_Hash:
        description: '历史版本HASH'
        required: false
        type: string
        default: ''

#环境变量配置
env:
  GITHUB_TOKEN: ${{secrets.GITHUB_TOKEN}}
  REPO_URL: https://github.com/coolsnowwolf/lede
  REPO_BRANCH: master
  REPO_Commit_Hash: ${{inputs.iREPO_Commit_Hash}}
  CONFIG_FILE: ${{inputs.iCONFIG_FILE}}                # 配置文件
  DIY_SETTING: ${{inputs.iDIY_SETTING}}                   # 自定义配置
  DIY_FEEDS: diy_feeds.sh                         # 主要用于更新Feeds
  GENERAL_CONFIG: ${{inputs.iGENERAL_CONFIG}}            # 通用配置
  DIYPackages: ${{inputs.iDIY_Packages}}                     # 自定义包配置
  CLASH_KERNEL: amd64
  CACHE_TOOLCHAIN: true
  FREE_UP_DISK: true
  UPLOAD_FIRMWARE_DIR: ${{inputs.iUPLOAD_FIRMWARE_DIR}}
  UPLOAD_BIN_DIR: false                           # 是否上传编译后的bin目录，因整理编译后的文件设置了UPLOAD_FIRMWARE_DIR，所以不上传整个bin目录
  FIRMWARE_RELEASE: ${{inputs.iFIRMWARE_RELEASE}} # 发布固件
  IS_RESIZE_SPACE: false      # 是否扩容空间，一般编译内容不多，可以不扩容，减少资源浪费
  TZ: Asia/Shanghai
  CONFIGS_DIR: Config                             # 自定义配置文件夹
  SCRIPTS_DIR: Scripts                            # 脚本文件夹
  DEFAULT_LANIP: ${{inputs.iDEFAULT_LANIP}}             # 默认lanIP
  MINE_SAY: ${{inputs.iWHAT_MY_SAY}} 
  UPLOAD_COWTRANSFER: true
  TOKEN_DINGDING: ${{inputs.iTOKEN_DINGDING}}
  
#CI权限
permissions: write-all

jobs:
  build:
    runs-on: ubuntu-22.04
    if: github.event.repository.owner.id == github.event.sender.id
    steps:

    - name: Initialization Environment (初始化环境)
      if: false == 'true'
      env:
        DEBIAN_FRONTEND: noninteractive
      run: |
        docker rmi $(docker images -q)
        sudo rm -rf /usr/share/dotnet /etc/apt/sources.list.d /usr/local/lib/android $AGENT_TOOLSDIRECTORY
        sudo -E apt-get -y purge azure-cli ghc* zulu* llvm* firefox google* dotnet* powershell openjdk* mongodb* moby* || true
        sudo -E apt-get -y update
        sudo -E apt -yqq install dos2unix
        sudo -E apt-get -y install $(curl -fsSL is.gd/depends_ubuntu_2204)
        sudo -E systemctl daemon-reload
        sudo -E apt-get -y autoremove --purge
        sudo -E apt-get -y clean
        sudo timedatectl set-timezone "$TZ"


    - name: Checkout (下载当前源码)
      uses: actions/checkout@master

    - name: Check Scripts (搜索脚本并配置权限)
      run: |
        find ./ -maxdepth 3 -type f -iregex ".*\(txt\|sh\)$" -exec dos2unix {} \; -exec chmod +x {} \;

    - name: config git (修改git下载缓冲大小)
      run: |
        git config --global http.postBuffer 524288000
        git config --global http.lowSpeedLimit 0
        git config --global http.lowSpeedTime 999999

    - name: Clone Source Code (克隆源代码)
      run: |
        df -hT $GITHUB_WORKSPACE
        COMPILE_DATE=$(date +"%y%m%d")
        COMPILE_TIME=$(date +"%y%m%d%H%M%S")
        COMPILE_DATE_HOUR=$(date +"%y%m%d%H%M")
        echo "COMPILE_DATE=$COMPILE_DATE" >> $GITHUB_ENV
        echo "COMPILE_TIME=$COMPILE_TIME" >> $GITHUB_ENV
        echo "COMPILE_DATE_HOUR=$COMPILE_DATE_HOUR" >> $GITHUB_ENV
        echo "【LinInfo】编译日期：$COMPILE_DATE；编译时间：$COMPILE_TIME；编译时间(精确到分钟)：$COMPILE_DATE_HOUR"
        echo "【LinInfo】克隆源代码：【$REPO_BRANCH】$REPO_URL"
        git clone --depth=1 --single-branch --branch $REPO_BRANCH $REPO_URL openwrt
        cd openwrt
        if [ -n "${{ env.REPO_Commit_Hash }}" ]; then
          echo "【LinInfo】GIT检出到指定版本：${{ env.REPO_Commit_Hash }}"
          git fetch --depth=1 origin ${{ env.REPO_Commit_Hash }}
          git checkout ${{ env.REPO_Commit_Hash }}
        fi
        REPO_GIT_HASH=$(git log -1 --pretty=format:'%h')
        echo "【LinInfo】GIT HASH：${REPO_GIT_HASH}"
        echo "REPO_GIT_HASH=$REPO_GIT_HASH" >> $GITHUB_ENV
        VERSION_INFO=$(git show -s --date=short --format="作者: %an<br/>时间: %cd<br/>内容: %s<br/>hash: %H")
        echo "VERSION_INFO=$VERSION_INFO" >> $GITHUB_ENV
        bash $GITHUB_WORKSPACE/$SCRIPTS_DIR/$DIY_FEEDS
        echo "【LinInfo】feeds内容：$(cat ./feeds.conf.default)"
        echo "OPENWRT_PATH=$PWD" >> $GITHUB_ENV
        echo "编译说明内容：${{ env.MINE_SAY }}"

    - name: Organize Files(整理文件)
      id: organize
      run: |
        cd $OPENWRT_PATH && mkdir -p ./upload ./upload/packages
        cp -r ./scripts/* ./upload/packages/
        # 创建一个临时目录
        TMP_DIR=$(mktemp -d)
        # 将 ./upload/packages 目录下的所有内容复制到临时目录
        cp -r ./upload/packages/* "$TMP_DIR"
        # 在临时目录中创建压缩文件
        tar -zcf ./upload/Packages.tar.gz -C "$TMP_DIR" ./*
        # 清理临时目录
        rm -rf "$TMP_DIR"
        rm -rf ./upload/packages
        echo "status=success" >> $GITHUB_OUTPUT

    - name: Upload firmware to wss
      id: wss
      run: |
        curl -fsSL git.io/file-transfer | sh
        ./transfer wss -s -p 16 --no-progress "${{ env.OPENWRT_PATH }}/upload/" 2>&1 | tee wss.log
        the_download_url=$(cat wss.log | grep "Download Link: " | cut -f3 -d" ")
        echo "下载地址：$the_download_url"
        echo "the_download_url=${the_download_url}" >> $GITHUB_OUTPUT
        echo "the_download_url=$the_download_url" >> $GITHUB_ENV

    - name: Send dingding notify
      uses: zcong1993/actions-ding@master
      with:
        dingToken: ${{ env.TOKEN_DINGDING }}
        body: |
          {
            "msgtype": "text",
            "text": {
                "content": "运行编译固件完成： \n${{ env.the_download_url }}"
             }
          }


