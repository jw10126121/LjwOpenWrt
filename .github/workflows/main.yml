#=================================================
# Description: Build OpenWrt using GitHub Actions
# Lisence: MIT
#=================================================

name:  main

on:
  push:
  workflow_call:
  workflow_dispatch:
    inputs:
      WRT_CONFIG:
        description: '配置文件'
        required: true
        type: string
        default: 'IPQ60XX-NOWIFI.txt'
      WRT_DIY_SETTING:
        description: 'DIY脚本'
        required: false
        type: string
        default: 'IPQ60XX.sh'
      WRT_DIYPackages:
        description: 'DIY包配置'
        required: false
        type: string
        default: 'Packages.sh'
      WRT_DEFAULT_LANIP:
        description: '配置LAN-IP'
        required: false
        type: string
        default: '192.168.0.1'
      WRT_REPO_URL:
        description: '源码'
        required: false
        type: string
        default: 'https://github.com/coolsnowwolf/lede'
      WRT_RELEASE_FIRMWARE:
        description: '发布firmware'
        required: false
        type: boolean
        default: true
      WRT_MINE_SAY:
        description: '编译说明'
        required: false
        type: string
        default: ''
      WRT_REPO_Commit_Hash:
        description: '历史版本HASH'
        required: false
        type: string
        default: ''
      # DINGDING_TOKEN:
      #   description: '钉钉TOKEN'
      #   required: false
      #   type: string
      #   default: ''
      # WRT_GENERAL_CONFIG:
      #   description: '通用配置文件'
      #   required: true
      #   type: string
      #   default: 'GENERAL.txt'

  # workflow_call:
  #   inputs:
  #     WRT_REPO_URL:
  #       required: true
  #       type: string
  #     WRT_REPO_BRANCH:
  #       required: true
  #       type: string
  #     WRT_REPO_Commit_Hash:
  #       required: true
  #       type: string
  #     WRT_CONFIG:
  #       required: true
  #       type: string
  #     WRT_DIY_SETTING:
  #       required: true
  #       type: string
  #     WRT_DIY_FEEDS:
  #       required: true
  #       type: string
  #       default: diy_feeds.sh
  #     WRT_GENERAL_CONFIG:
  #       required: true
  #       type: string
  #     WRT_DIYPackages:
  #       required: true
  #       type: string
  #     WRT_RELEASE_FIRMWARE:
  #       required: true
  #       type: boolean
  #     WRT_DEFAULT_LANIP:
  #       required: true
  #       type: string
  #     WRT_MINE_SAY:
  #       required: true
  #       type: string
  #     WRT_TOKEN_DINGDING:
  #       required: false
  #       type: string

        
#环境变量配置
env:
  DINGDING_TOKEN: ${{secrets.DINGDING_TOKEN}}
  WRT_REPO_URL: ${{ inputs.WRT_REPO_URL || 'https://github.com/coolsnowwolf/lede' }}
  WRT_REPO_BRANCH: ${{ inputs.WRT_REPO_BRANCH || 'master' }}
  WRT_REPO_Commit_Hash: ${{inputs.WRT_REPO_Commit_Hash}}
  WRT_CONFIG: ${{inputs.WRT_CONFIG}}           # 配置文件
  WRT_DIY_SETTING: ${{ inputs.WRT_DIY_SETTING }}           # 自定义配置
  WRT_DIY_FEEDS: ${{ inputs.WRT_DIY_FEEDS || 'diy_feeds.sh' }}                         # 主要用于更新Feeds
  WRT_GENERAL_CONFIG: GENERAL.txt # ${{ inputs.WRT_GENERAL_CONFIG }}     # 通用配置
  WRT_DIYPackages: ${{inputs.WRT_DIYPackages}}          # 自定义包配置
  WRT_RELEASE_FIRMWARE: ${{inputs.WRT_RELEASE_FIRMWARE}} # 发布固件
  WRT_DEFAULT_LANIP: ${{inputs.WRT_DEFAULT_LANIP}}       # 默认lanIP
  WRT_MINE_SAY: ${{inputs.WRT_MINE_SAY}} 
  WRT_DIR_CONFIGS: Config                             # 自定义配置文件夹
  WRT_DIR_SCRIPTS: Scripts                            # 脚本文件夹
  UPLOAD_FIRMWARE_DIR: true
  TZ: Asia/Shanghai                               # 默认时区
  IS_RESET_PASSWORD: true                         # 是否把密码重置为空
  UPLOAD_BIN_DIR: false                           # 是否上传编译后的bin目录，因整理编译后的文件设置了UPLOAD_FIRMWARE_DIR，所以不上传整个bin目录
  IS_RESIZE_SPACE: false                          # 是否扩容空间，一般编译内容不多，可以不扩容，减少资源浪费
  CACHE_TOOLCHAIN: true
  CLASH_KERNEL: amd64
  FREE_UP_DISK: true
  WRT_HAS_WIFI: true
  UPLOAD_BIN_DIR_WSS: false
  WRT_USE_APK: false


  
#CI权限
permissions: write-all

jobs:
  build:
    runs-on: ubuntu-22.04
    if: github.event.repository.owner.id == github.event.sender.id
    steps:

    - name: Check Server Performance (检查服务器性能)
      run: |
        echo "编译说明：${{ env.WRT_MINE_SAY }}"
        echo "警告⚠"
        echo "分配的服务器性能有限，若选择的插件过多，务必注意CPU性能！"
        echo -e "已知CPU型号（降序）：7763，8370C，8272CL，8171M，E5-2673 \n"
        echo "--------------------------CPU信息--------------------------"
        echo "CPU物理数量：$(cat /proc/cpuinfo | grep "physical id" | sort | uniq | wc -l)"
        echo -e "CPU核心信息：$(cat /proc/cpuinfo | grep name | cut -f2 -d: | uniq -c) \n"
        echo "--------------------------内存信息--------------------------"
        echo "已安装内存详细信息："
        echo -e "$(sudo lshw -short -C memory | grep GiB) \n"
        echo "--------------------------硬盘信息--------------------------"
        echo "硬盘数量：$(ls /dev/sd* | grep -v [1-9] | wc -l)" && df -hT
     
    - name: Checkout (下载当前源码)
      uses: actions/checkout@master    

    - name: 检查变量
      run: |
        readme_desc_file="$GITHUB_WORKSPACE/$WRT_DIR_SCRIPTS/readme.txt"
        readme_file_note=$(cat $readme_desc_file)
        echo 'readme_file_note<<EOF' >> $GITHUB_ENV
        cat "${readme_desc_file}" >> $GITHUB_ENV
        echo 'EOF' >> $GITHUB_ENV
        # echo 'readme_file_note: ${{ env.readme_file_note }}' > /dev/null 2>&1
        # sleep 1

    - name: Send dingding notify
      continue-on-error: true
      uses: zcong1993/actions-ding@master
      if: env.DINGDING_TOKEN != ''
      with:
        dingToken: ${{ env.DINGDING_TOKEN }}
        body: |
          {
            "msgtype": "markdown",
            "markdown": {
              "title": "GitHub Action Notification",
              "text": "#### GitHub Action Notification\n> \
              - **Workflow**: ${GITHUB_WORKFLOW}\n> \
              - **Event**: ${GITHUB_EVENT_NAME}\n> \
              - **Actor**: ${GITHUB_ACTOR}\n> \
              - **Repository**: ${GITHUB_REPOSITORY}\n> \
              - **Commit**: ${GITHUB_SHA}\n> \
              - [View on GitHub](${GITHUB_SERVER_URL}/${GITHUB_REPOSITORY}/actions/runs/${GITHUB_RUN_ID})"
            }
          }
        
    # - name: Send dingding notify
    #   continue-on-error: true
    #   uses: zcong1993/actions-ding@master
    #   if: env.DINGDING_TOKEN != ''
    #   with:
    #     dingToken: ${{ env.DINGDING_TOKEN }}
    #     body: |
    #       {
    #         "msgtype": "text",
    #         "text": {
    #             "content": "编译开始：\n${{ env.readme_file_note }}"
    #          }
    #       }
  